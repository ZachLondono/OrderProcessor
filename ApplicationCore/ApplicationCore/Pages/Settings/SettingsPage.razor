@page "/settings"
@using System.Diagnostics
@using ApplicationCore.Features.DataFilePaths
@using ApplicationCore.Features.Orders.OrderLoading.LoadAllmoxyOrderData.AllmoxyXMLModels
@using Domain.Infrastructure.Data
@using ApplicationCore.Features.Settings
@using Microsoft.Extensions.Options;
@using Domain.Components
@using static Domain.Components.Button
@using Domain.Services;

<TabControl>

    <TabPage Title="Data">
        <DataFilePathsEditor />
    </TabPage>
    <TabPage Title="CNC Tools">
        <ToolFileEditor />
    </TabPage>
    <TabPage Title="Export">
        <ExportSettingsEditor />
    </TabPage>
    <TabPage Title="Email">
        <EmailSettingsEditor />
    </TabPage>
    <TabPage Title="Schedule">
        <ScheduleSettingsEditor />
    </TabPage>
    <TabPage Title="App Settings">
        <div>
            <Button Style="ButtonStyle.Link" OnClick="OpenAppSettingsFile" Color="ButtonColor.Secondary" Size="ButtonSize.XSmall">Open App Settings File</Button>
        </div>
        <section class="mt-12">
            <div>
                <label>Password Util</label>
                <input type="password" @bind-value="@_clearPassword" class="input-text" />
            </div>
            <Button OnClick="ProtectPassword">Protect</Button>
            @if (_protectedPassword != string.Empty) {
                <div class="mt-3 p-3 w-2/3 bg-slate-300 rounded-md break-words">
                    @_protectedPassword           
                </div>
            }
        </section>
    </TabPage>

</TabControl>

<hr class="my-5" />

@code {

    private string _clearPassword = "";
    private string _protectedPassword = "";

    private void OpenAppSettingsFile() {
        OpenFile("appsettings.json");
    }

    private void OpenFile(string filePath) {
        try {

            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = filePath;
            psi.UseShellExecute = true;
            Process.Start(psi);

        } catch (Exception ex) {
            Debug.WriteLine(ex);    
        }

    }

    private void ProtectPassword() {
        _protectedPassword = UserDataProtection.Protect(_clearPassword);
        StateHasChanged();
    }

}
