@page "/orders/details"
@using ApplicationCore.Features.CNC.GCode.Domain;
@using ApplicationCore.Features.CNC.LabelDB;
@using ApplicationCore.Features.CNC.LabelDB.Contracts;
@using ApplicationCore.Features.CNC.ReleasePDF;
@using ApplicationCore.Features.CNC.ReleasePDF.Contracts;
@using ApplicationCore.Features.CNC.Shared;
@using ApplicationCore.Features.Companies.Domain.ValueObjects;
@using ApplicationCore.Features.Companies.Queries;
@using ApplicationCore.Features.Companies;
@using ApplicationCore.Features.Orders.Details
@using ApplicationCore.Features.Orders.Shared.Domain.Entities;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Features.ProductPlanner.Contracts;
@using ApplicationCore.Features.ProductPlanner;
@using ApplicationCore.Features.Shared.Domain;
@using ApplicationCore.Infrastructure;
@implements IOrderDetailsViewModel
@inject IBus Bus
@inject NavigationManager NavigationManager
@inject CompanyState CompanyState
@inject IFilePicker FilePicker
@inject IModalService ModalService

<OrderDetails ViewModel="@this" />

@code {

    public async Task<string> GetCompanyName(Guid companyId) {

        var result = await Bus.Send(new GetCompanyNameById.Query(companyId));

        string name = string.Empty;

        result.OnSuccess(companyName => name = companyName ?? string.Empty);

        return name;

    }

    public async Task OpenCompanyPage(Guid companyId) {
        await CompanyState.LoadCompany(companyId);
        NavigationManager.NavigateTo("/companies/details", true);
    }

    public async Task<ReleaseProfile?> GetVendorReleaseProfile(Guid vendorId) {

        var response = await Bus.Send(new GetCompanyById.Query(vendorId));

        ReleaseProfile? profile = null;

        response.OnSuccess(vendor => {
            profile = vendor?.ReleapseProfile ?? null;
        });

        return profile;
    }

    public async Task<string> ExportOrderForPSI(Order order) {

        string errors = string.Empty;

        await Task.Run(async () => {

            var products = order
                            .Products
                            .Where(p => p is IPPProductContainer)
                            .Cast<IPPProductContainer>()
                            .SelectMany(c => c.GetPPProducts())
                            .ToList();

            var job = new PPJob($"{order.Number} - {order.Name}", order.OrderDate, products);

            var filePath = Path.Combine(@"C:\CP3\CPDATA", $"{order.Number} - {order.Name}.ext");

            var result = await Bus.Send(new GenerateEXTFile.Command(job, filePath));

            int index = 0;
            foreach (var product in products) {
                index++;
                foreach (var (key, value) in product.ManualOverrideParameters) {

                    errors += $"[cab:{index}] {key} ==>> {value}<br>";

                }
            }

        });

        return errors;

    }

    public async Task GenerateCNCReleasePDF(Order order) {

        string selectedPath = "";

        bool wasPicked = await FilePicker.PickFileAsync("Select label database", "Y:\\CADCode\\Label Data", new("CADCode Label File", ".mdb"), (path) => {
            selectedPath = path;
        });

        if (!wasPicked || selectedPath == "") {
            return;
        }

        var modal = ModalService.Show<ListAvailableJobsDialog>("Select Job", new ModalParameters() {
                { "LabelDatabaseFilePath", selectedPath }
        });
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) {
            return;
        }

        if (modalResult.Data is not IEnumerable<AvailableJob> selectedJobs) {
            _ = await ModalService.OpenInformationDialog("Error", "Unexpected Data Returned", InformationDialog.MessageType.Warning);
            return;
        }

        var jobsByMachine = selectedJobs.GroupBy(job => job.MachineName).ToList();

        foreach (var selectedJobsGroup in jobsByMachine) {

            List<ExistingJob> existingJobs = new();

            foreach (var selectedJob in selectedJobsGroup) {

                var loadJobResult = await Bus.Send(new LoadJobFromLabelDB.Command(selectedPath, selectedJob.Name));

                ExistingJob? existingJob = null;

                loadJobResult.OnSuccess(job => existingJob = job);

                if (existingJob is null) {
                    continue;
                }

                existingJobs.Add(existingJob);

            }

            var nestedPartByProgram = existingJobs.SelectMany(existingJob => existingJob.Parts
                                                                                        .GroupBy(part => part.PatternNumber)
                                                                                        .ToDictionary(group => existingJob.Patterns.Skip(group.Key - 1).FirstOrDefault()?.Name ?? "", group => group.ToList()))
                                                    .GroupBy(kvp => kvp.Key, kvp => kvp.Value)
                                                    .ToDictionary(g => g.Key, g => g.Last());


            var programs = existingJobs.SelectMany(existingJob => existingJob.Patterns.Select(pattern => {
                var parts = GetParts(nestedPartByProgram, pattern.Name);
                return new ReleasedProgram() {
                    Name = pattern.Name,
                    ImagePath = $"Y:\\CADCode\\pix\\{pattern.ImagePath}.wmf",
                    HasFace6 = parts.Any(p => p.HasFace6),
                    Material = new ProgramMaterial() {
                        Name = pattern.MaterialName,
                        Width = pattern.MaterialWidth,
                        Length = pattern.MaterialLength,
                        Thickness = pattern.MaterialThickness,
                        IsGrained = existingJob.Inventory
                                            .Where(inv => inv.Name == pattern.MaterialName)
                                            .Select(inv => inv.Grained)
                                            .FirstOrDefault()?.Equals("1") ?? false,
                        Yield = 0 // TODO: calculate yield
                    },
                    Parts = parts
                };
            }));

            var result = await Bus.Send(new GetCompanyNameById.Query(order.VendorId));
            string vendorName = "";
            result.OnSuccess(name => vendorName = name ?? "");

            ReleasedJob releasedJob = new() {
                JobName = $"{order.Number} {order.Name}",
                CustomerName = order.Customer.Name,
                VendorName = vendorName,
                OrderDate = order.OrderDate,
                ReleaseDate = DateTime.Now,
                Releases = new List<MachineRelease>() {
                    new() {
                        MachineName = selectedJobsGroup.Key,
                        MachineTableOrientation = (selectedJobsGroup.Key == "Omnitech" ? TableOrientation.Rotated : TableOrientation.Standard),
                        Programs = programs
                    }
                }
            };

            await Bus.Send(new GenerateCNCReleasePDF.Command(releasedJob, @"C:\Users\Zachary Londono\Desktop\ExampleConfiguration\cutlists"));

        }

    }

    public List<NestedPart> GetParts(IDictionary<string, List<ManufacturedPart>> nestPartsByPatternName, string patternName) {

        if (nestPartsByPatternName.TryGetValue(patternName, out var parts)) {

            return parts.Select(part => new NestedPart(){
                    Name = part.Name,
                    Width = Dimension.FromMillimeters(part.Width),
                    Length = Dimension.FromMillimeters(part.Length),
                    Description = part.Description,
                    Center = new Point(part.InsertX + part.Length / 2, part.InsertY + part.Width / 2),
                    ProductNumber = part.ProductNumber,
                    HasFace6 = part.HasFace6 == 0
                }).ToList();

        }

        return new();

    }

}
