@page "/orders/details"
@using ApplicationCore.Features.Orders.Details
@using ApplicationCore.Features.Orders.Shared.Domain.Entities;
@using ApplicationCore.Features.Orders.Shared.State;
@using ApplicationCore.Shared.Services;
@using ApplicationCore.Widgets.BricsCADFileCopy
@using ApplicationCore.Widgets.Orders.OrderDelete
@using ApplicationCore.Widgets.Orders.OrderExport
@using ApplicationCore.Widgets.Orders.OrderRelationshipList
@using ApplicationCore.Widgets.Orders.OrderRelease
@using ApplicationCore.Widgets.Schedule
@inject OrderState OrderState
@inject NavigationService Nav

<div class="grid grid-cols-1 gap-5">

    <section id="orderDetails">
        <OrderDetails>
            <div class="flex flex-col space-y-5">
                <OrderExportWidget Order="OrderState.Order" />
                <OrderReleaseWidget Orders="GetOrder()" />
                <OrderDeleteWidget OrderId="OrderState.Order?.Id ?? Guid.Empty" OnOrderDeleted="OnOrderDeleted" />
                <BricsCADFileSaveWidget OutputDirectory="@OrderState.Order?.WorkingDirectory"/>
                <AddToScheduleWidget Order="OrderState.Order" />
            </div>
        </OrderDetails>
    </section>

    <section>
        <h2 class="font-bold text-md">Related Orders</h2>
        <OrderRelationshipListWidget OrderId="OrderState.Order?.Id"/>
    </section>

</div>

@code {

    public List<Order> GetOrder() {
        if (OrderState.Order is null) {
            return new() ;
        }
        return new() { OrderState.Order };
    }

    public void OnOrderDeleted() {
        Nav.NavigateToOrderListPage();
    }

}
