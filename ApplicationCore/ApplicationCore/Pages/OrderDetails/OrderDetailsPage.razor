@page "/orders/details"
@using ApplicationCore.Features.Companies.Domain.ValueObjects;
@using ApplicationCore.Features.Companies.Queries;
@using ApplicationCore.Features.Companies;
@using ApplicationCore.Features.Orders.Details
@using ApplicationCore.Features.Orders.Shared.Domain.Entities;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Features.ProductPlanner.Contracts;
@using ApplicationCore.Features.ProductPlanner;
@using ApplicationCore.Infrastructure;
@implements IOrderDetailsViewModel
@inject IBus Bus
@inject NavigationManager NavigationManager
@inject CompanyState CompanyState

<OrderDetails ViewModel="@this" />

@code {

    public async Task<string> GetCompanyName(Guid companyId) {

        var result = await Bus.Send(new GetCompanyNameById.Query(companyId));

        string name = string.Empty;

        result.OnSuccess(companyName => name = companyName ?? string.Empty);

        return name;

    }

    public async Task OpenCompanyPage(Guid companyId) {
        await CompanyState.LoadCompany(companyId);
        NavigationManager.NavigateTo("/companies/details", true);
    }

    public async Task<ReleaseProfile?> GetVendorReleaseProfile(Guid vendorId) {

        var response = await Bus.Send(new GetCompanyById.Query(vendorId));

        ReleaseProfile? profile = null;

        response.OnSuccess(vendor => {
            profile = vendor?.ReleapseProfile ?? null;
        });

        return profile;
    }

    public async Task<string> ExportOrderForPSI(Order order) {

        string errors = string.Empty;

        await Task.Run(async () => {

            var products = order
                            .Products
                            .Where(p => p is IPPProductContainer)
                            .Cast<IPPProductContainer>()
                            .SelectMany(c => c.GetPPProducts())
                            .ToList();

            var job = new PPJob(order.Name, order.OrderDate, products);

            var filePath = Path.Combine(@"C:\CP3\CPDATA", $"{order.Number} - {order.Name}.ext");

            var result = await Bus.Send(new GenerateEXTFile.Command(job, filePath));

            int index = 0;
            foreach (var product in products) {
                index++;
                foreach (var (key, value) in product.ManualOverrideParameters) {

                    errors += $"[cab:{index}] {key} ==>> {value}<br>";

                }
            }

        });

        return errors;

    }

}
