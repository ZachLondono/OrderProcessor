@page "/orders/details/{OrderIdStr}"
@using ApplicationCore.Features.CustomizationScriptManager.Views
@using ApplicationCore.Features.DeleteOrder
@using ApplicationCore.Features.HardwareList
@using ApplicationCore.Features.OrderRelationshipList
@using ApplicationCore.Features.Orders.Details
@using ApplicationCore.Features.Orders.OrderExport
@using ApplicationCore.Features.Orders.OrderRelease
@using Domain.Orders.Entities;
@using Domain.Orders.Persistance;
@using ApplicationCore.Features.Products.ProductDrawings.Views
@using ApplicationCore.Features.SaveOrderDrawings
@using ApplicationCore.Features.Schedule
@using Domain.Components
@using ApplicationCore.Shared.Services;
@using ApplicationCore.Features.Products.UpdateClosetPart;
@using ApplicationCore.Features.Orders.Details.Views;
@using Domain.Orders.Entities.Products;
@using Domain.Orders.Entities.Products.Closets;
@using Domain.Services;
@inject NavigationService Nav

@if (OrderId == Guid.Empty) {

    <p>No Order To Display</p>
    
} else {
    
    <div class="grid grid-cols-1">
    
        <section id="orderDetails">
            <OrderDetails OrderId="OrderId" @ref="_detailsRef">
                <ActionPanel Context="order">
                    <div class="flex flex-col space-y-3 items-center text-center">
                        <OrderExportWidget OrderId="OrderId" />
                        <OrderReleaseWidget OrderIds="new Guid[] { OrderId }" />
                        <OrderDeleteButton OrderId="OrderId" OnOrderDeleted="OnOrderDeleted" />
                        <BricsCADFileSaveWidget OutputDirectory="@order.WorkingDirectory"/>
                        <AddToScheduleButton Order="order" />
                        <CustomizationScriptsManagerButton OrderId="OrderId" />
                    </div>
                </ActionPanel>
                <ProductActionsColumn Context="product">
                    <div class="flex flex-row">
                        <ProductDrawingManagerButton ProductId="@product.Id" />
                        @if (product is ClosetPart closetPart) {
                            <Button OnClickAsync="() => OpenPartEditor(closetPart)" class="ml-5">Edit</Button>
                        }
                    </div>
                </ProductActionsColumn>
            </OrderDetails>
        </section>

        <section>
            <HardwareList OrderId="OrderId" />
        </section>
    
        <section class="mt-16">
            <OrderRelationshipList OrderId="OrderId"/>
        </section>
    
    </div>

}

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private OrderDetails? _detailsRef;

    [Parameter]
    public string OrderIdStr { get; set; } = string.Empty;

    public Guid OrderId { get; set; }

    protected override void OnParametersSet() {
        if (Guid.TryParse(OrderIdStr, out Guid orderId)) {
            OrderId = orderId;            
        }
    }

    public void OnOrderDeleted() {
        Nav.NavigateToOrderListPage();
    }

    public async Task OpenPartEditor(IClosetPartProduct part) {

        if (part is ClosetPart closetPart) {

            var parameters = new ModalParameters() {
                { "Product", closetPart }
            };

            _ = await Modal.Show<ClosetPartEditor>("Edit Closet Part", parameters).Result;

            // TODO: Do this better
            _detailsRef?.OnProductsChanged();

        }

    }

}
