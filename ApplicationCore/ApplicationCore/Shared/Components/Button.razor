
<button @onclick:stopPropagation="StopPropagation" @onclick:preventDefault="PreventDefault" @onclick="async () => { OnClick(); await OnClickAsync(); }" class="@Classes()" disabled="@Disabled" type="@Type">@ChildContent</button>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Action OnClick { get; set; } = new Action(() => { });

    [Parameter]
    public Func<Task> OnClickAsync { get; set; } = new Func<Task>(() => Task.CompletedTask);

    [Parameter]
    public ButtonStyle Style { get; set; } = ButtonStyle.Contained;

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Primary;

    [Parameter]
    public ButtonRounded Rounded { get; set; } = ButtonRounded.All;

    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Medium;

    [Parameter]
    public string Type { get; set; } = "button";

    [Parameter]
    public bool StopPropagation { get; set; } = false;

    [Parameter]
    public bool PreventDefault { get; set; } = false;

    private string Classes() {

        string baseClass = "font-semibold";

        string sizeClass = Size switch {
            ButtonSize.XSmall => "text-xs p-1",
            ButtonSize.Small => "text-sm p-1.5",
            ButtonSize.Medium => "text-base px-2 py-1.5",
            ButtonSize.Large => "text-lg px-2.5 py-2",
            _ => ""
        };

        string roundedClass = Rounded switch {
            ButtonRounded.Left => "rounded-l",
            ButtonRounded.Right => "rounded-r",
            ButtonRounded.Top => "rounded-t",
            ButtonRounded.Bottom => "rounded-b",
            ButtonRounded.All => "rounded",
            ButtonRounded.None or _ => "rounded-none",
        };

        string styleClass = Color switch {
            ButtonColor.Primary => Style switch {
                ButtonStyle.Link => "underline text-blue-600 hover:text-blue-700 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Text => "text-blue-600 hover:bg-blue-50 active:bg-blue-200 focus-visible:bg-blue-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "border border-1 border-blue-600 hover:border-blue-700 text-blue-600 hover:bg-blue-50 active:bg-blue-200 focus-visible:bg-blue-100 disabled:text-gray-400 disabled:border-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "border border-1 border-blue-600 hover:border-blue-500 text-white bg-blue-600 hover:bg-blue-500 active:bg-blue-300 focus-visible:bg-blue-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            ButtonColor.Secondary => Style switch {
                ButtonStyle.Link => "underline text-slate-600 hover:text-slate-700 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Text => "text-slate-600 hover:bg-slate-50 active:bg-slate-200 focus-visible:bg-slate-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "border border-1 border-slate-600 hover:border-slate-700 text-slate-600 hover:bg-slate-50 active:bg-slate-200 focus-visible:bg-slate-100 disabled:text-gray-400 disabled:border-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "border border-1 border-slate-600 hover:border-slate-500 text-white bg-slate-600 hover:bg-slate-500 active:bg-slate-300 focus-visible:bg-slate-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            ButtonColor.Success => Style switch {
                ButtonStyle.Link => "underline text-green-600 hover:text-green-700 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Text => "text-green-600 hover:bg-green-50 active:bg-green-200 focus-visible:bg-green-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "border border-1 border-green-600 hover:border-green-700 text-green-600 hover:bg-green-50 active:bg-green-200 focus-visible:bg-green-100 disabled:text-gray-400 disabled:border-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "border border-1 border-green-600 hover:border-green-500 text-white bg-green-600 hover:bg-green-500 active:bg-green-300 focus-visible:bg-green-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            ButtonColor.Danger => Style switch {
                ButtonStyle.Link => "underline text-red-600 hover:text-red-700 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Text => "text-red-600 hover:bg-red-50 active:bg-red-200 focus-visible:bg-red-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "border border-1 border-red-600 hover:border-red-700 text-red-600 hover:bg-red-50 active:bg-red-200 focus-visible:bg-red-100 disabled:text-gray-400 disabled:border-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "border border-1 border-red-600 hover:border-red-500 text-white bg-red-600 hover:bg-red-500 active:bg-red-300 focus-visible:bg-red-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            _ => ""
        };

        return $"{baseClass} {sizeClass} {roundedClass} {styleClass} {Class}";

    }

    public enum ButtonSize {
        XSmall,
        Small,
        Medium,
        Large
    }

    public enum ButtonStyle {
        Contained,
        Outline,
        Text,
        Link 
    }

    public enum ButtonColor {
        Primary,
        Secondary,
        Success,
        Danger
    }

    public enum ButtonRounded {
        Left,
        Right,
        Top,
        Bottom,
        All,
        None
    }

}