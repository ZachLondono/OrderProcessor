@using System.Diagnostics;
@using static ApplicationCore.Shared.Components.Button;
@inject IJSRuntime JSRuntime
<!--Wrapper-->
<div class="relative inline-block">

	<Button Color="Color" Style="Style" OnClickAsync="Toggle" Class="@(Class + " dropdown-btn")" Rounded="Rounded">@ButtonContent</Button>

	<!--Popup Element-->
	<div class="@PositionClasses() absolute shadow-md p-3 bg-white border border-gray-300 whitespace-nowrap dropdown" hidden @ref="_dropdown">
		@DropDownContent
	</div>
</div>

@code {

	[Parameter]
	public RenderFragment? DropDownContent { get; set; }

	[Parameter]
	public RenderFragment? ButtonContent { get; set; }

	[Parameter]
	public DropdownPosition Position { get; set; } = DropdownPosition.BottomLeft;

	[Parameter]
	public ButtonStyle Style { get; set; } = ButtonStyle.Contained;

	[Parameter]
	public string Class { get; set; } = string.Empty;

	[Parameter]
	public ButtonColor Color { get; set; } = ButtonColor.Primary;

	[Parameter]
	public ButtonRounded Rounded { get; set; } = ButtonRounded.All;

	[Parameter]
	public Func<Task> OnOpenAsync { get; set; } = () => Task.CompletedTask;

	private ElementReference _dropdown;

	private bool _loading = false;

	private async Task Toggle() {
		bool hidden = await JSRuntime.InvokeAsync<bool>("toggleDropdown", _dropdown);
		StateHasChanged();
		if (hidden == false) {
			_loading = true;
			await OnOpenAsync();
			_loading = false;
		}
	}

	private string PositionClasses() => Position switch {
		DropdownPosition.BottomLeft => "top-full left-0",
		DropdownPosition.BottomRight => "top-full right-0",
		_ => ""
	};

	public enum DropdownPosition {
		BottomLeft,
		BottomRight
		// TODO: add top, and full left or full right
	}

}
