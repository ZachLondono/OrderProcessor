@using ApplicationCore.Features.OpenDoorOrders
@using ApplicationCore.Infrastructure.Bus
@using ApplicationCore.Shared.Components
@using ApplicationCore.Shared.Components.ProgressModal
@using ApplicationCore.Shared.Services

<EditForm Model="Model">

    <div>
        <label class="font-semibold">Workbook</label>
        <div class="text-xs">@Model.WorkbookFilePath</div>

        <div class="ml-5 text-sm">
            <div>
                <label class="font-semibold">
                    <InputCheckbox @bind-Value="Model.IncludeCover" />
                    Cover
                </label>
            </div>
            <div>
                <label class="font-semibold">
                    <InputCheckbox @bind-Value="Model.IncludePackingList" />
                    Packing List
                </label>
            </div>
            <div>
                <label class="font-semibold">
                    <InputCheckbox @bind-Value="Model.IncludeInvoice" />
                    Invoice
                </label>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <label class="font-semibold">
            <InputCheckbox @bind-Value="Model.GenerateGCodeFromWorkbook" />
            Generate GCode
        </label>
    </div>

    <div class="mt-3">
        <label class="font-semibold">
            <InputCheckbox @bind-Value="Model.AddExistingWSXMLReport" />
            WSXML Report
        </label>
        @if (Model.AddExistingWSXMLReport) {
            <div>
                <Button Color="Button.ButtonColor.Secondary" OnClick="ChooseReportFile" Class="mr-5">Choose Report</Button>
                @if (string.IsNullOrEmpty(Model.WSXMLReportFilePath)) {
                    <span>None selected</span>
                } else {
                    <span>@Model.WSXMLReportFilePath</span>
                }
            </div>
        }
    </div>
    
    <div class="mt-3">
        <label >
            <span class="font-semibold">
                Output directory
            </span>
            <InputText @bind-Value="Model.OutputDirectory" class="input-text w-full" spellcheck="false" />
        </label>
    </div>

    <div class="mt-3">
        <label>
            <span class="font-semibold">
                File name
            </span>
            <InputText @bind-Value="Model.FileName" class="input-text w-full" spellcheck="false" />
        </label>
    </div>

    <div class="mt-3">
        <label class="font-semibold">
            <InputCheckbox @bind-Value="Model.SendEmail" />
            Send Email
        </label>
        @if (Model.SendEmail) {
            <InputText @bind-Value="Model.EmailRecipients" class="input-text w-full" placeholder="example@email.com" />
        }
    </div>

    <div class="my-5 text-center">
        <Button Color="Button.ButtonColor.Primary" class="mt-3" OnClickAsync="GenerateDoorOrderRelease">Generate PDF</Button>
    </div>

</EditForm>

@code {

    [Parameter]
    public DoorOrder? Order { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Inject]
    public IBus? Bus { get; set; }

    [Inject]
    public DoorOrderReleaseActionRunnerFactory? ActionRunnerFactory { get; set; }

    [Inject]
    public IFilePicker FilePicker { get; set; }

    public DoorOrderReleaseOptions Model { get; set; } = new();

    protected override async Task OnInitializedAsync() {

        if (Order is null || Bus is null) return;

        var outputDirResult = await Bus.Send(new GetDoorOrderCutListDirectory.Query(Order.OrderFileDirectory));
        string outputDirectory = @"R:\Door Orders\Door Programs";
        outputDirResult.OnSuccess(dir => outputDirectory = dir);

        bool includeInvoice = true;
        string emailRecipients = "maciej@royalcabinet.com";
        if (!Order.Vendor.ToLowerInvariant().Contains("royal")) {
            emailRecipients += ";toya@royalcabinet.com";
            includeInvoice = false;
        }

        Model = new DoorOrderReleaseOptions() {

				WorkbookFilePath = Order.OrderFile,
				GenerateGCodeFromWorkbook = false,

                AddExistingWSXMLReport = false,
                WSXMLReportFilePath = "",

                IncludeCover = true,
                IncludePackingList = true,
                IncludeInvoice = includeInvoice,

				FileName = $"{Order.OrderNumber} - MDF Door Cut List",
				OutputDirectory = outputDirectory,

				SendEmail = true,
				EmailRecipients = emailRecipients,
                
			};

        StateHasChanged();

        var files = await GetReportFiles(Order.OrderNumber);
        Model.WSXMLReportFilePath = files.FirstOrDefault() ?? ""; // TODO: allow for multiple files
        Model.AddExistingWSXMLReport = files.Any();

    }

    private static async Task<string[]> GetReportFiles(string number) {
        return await Task.Run(() => {
            try {
                return Directory.GetFiles(@"Y:\CADCode\Reports\", $"{number}* - *.xml");
            } catch {
                return Array.Empty<string>();
            }
        });
    }

    private void ChooseReportFile()
        => FilePicker.PickFile(new() {
                Title = "Select CADCode WS Report File",
                InitialDirectory = @"Y:\CADCode\Reports",
                Filter = new("CADCode WS Report", "xml"),
            }, (fileName) => {
            Model.WSXMLReportFilePath = fileName;
            InvokeAsync(StateHasChanged);
        });

    private async Task GenerateDoorOrderRelease() {

        if (ActionRunnerFactory is null || Order is null) return;

		var actionRunner = ActionRunnerFactory.CreateActionRunner(Order, Model);

		var parameters = new ModalParameters() {
            { "ActionRunner",  actionRunner },
            { "InProgressTitle", "Releasing Order..." },
            { "CompleteTitle", "Release Complete" }
        };

		var options = new ModalOptions() {
            HideHeader = true,
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            Size = ModalSize.Large
        };

		var dialog = Modal.Show<ProgressModal>("Order Release Progress", parameters, options);
		_ = await dialog.Result;
        
        await BlazoredModal.CloseAsync();

	}

}
