@using ApplicationCore.Features.Orders.Delete;
@using ApplicationCore.Shared.Components
@using static ApplicationCore.Shared.Components.Button;

<Button Type="button" OnClickAsync="DeleteOrder" Disabled="_isDeleting" Class="flex justify-center items-center h-10 w-36" Color="ButtonColor.Secondary">
    @if (_isDeleting) {
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
    }
    Delete 
</Button>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Parameter]
    public Guid OrderId { get; set; }

    [Parameter]
    public Action? OnOrderDeleted { get; set; }

    private bool _isDeleting = false;

    private async Task DeleteOrder() {

        if (_isDeleting || OrderId == Guid.Empty) {
            return;
        }

        _isDeleting = true;

        var modal = Modal.Show<DeleteOrderConfirmationModal>("Confirmation",
            new ModalParameters() {
                { "OrderId", OrderId }
            },
            new ModalOptions() {
                HideHeader = false,
                HideCloseButton = true,
                DisableBackgroundCancel = true,
                Size = ModalSize.Medium
            }
        );

        var result = await modal.Result;

        _isDeleting = false;

        if (result.Cancelled) return;

        OnOrderDeleted?.Invoke();

    }

}
