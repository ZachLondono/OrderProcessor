@using ApplicationCore.Shared.Components
@using ApplicationCore.Shared.Settings;
@using static ApplicationCore.Shared.Components.Button;

@if (_settings is null) {
    
    <div>
        <h3>Error</h3>
        <span>Settings could not be loaded</span>
    </div>

} else {

    <EditForm Model="_settings" OnValidSubmit="SaveChanges">

        <div>
            <label>EXT Output</label>
            <InputText @bind-Value="_settings.EXTOutputDirectory" class="input-text w-full" />
        </div>

        <div>
            <label>CSV Output</label>
            <InputText @bind-Value="_settings.CSVOutputDirectory" class="input-text w-full" />
        </div>

        <div>
            <label>MDF Door Workbook</label>
            <InputText @bind-Value="_settings.MDFDoorTemplateFilePath" class="input-text w-full" />
        </div>

        <div>
            <label>CSV Output</label>
            <InputText @bind-Value="_settings.DovetailTemplateFilePath" class="input-text w-full" />
        </div>

        <div class="my-5">
            <Button type="submit" Color="ButtonColor.Primary">Save</Button>
        </div>

    </EditForm>

}
@code {

    private ExportSettings? _settings = null;

    [Inject]
    public IWritableOptions<ExportSettings>? Options { get; set; }

    protected override void OnInitialized() {

        if (Options is null) return;

        _settings = Options.Value;

    }

    private void SaveChanges() {

        if (Options is null || _settings is null) return;

        Options.Update(settings => {
            settings.EXTOutputDirectory = _settings.EXTOutputDirectory;
            settings.CSVOutputDirectory = _settings.CSVOutputDirectory;
            settings.MDFDoorTemplateFilePath = _settings.MDFDoorTemplateFilePath;
            settings.DovetailTemplateFilePath = _settings.DovetailTemplateFilePath;
        });

    }


}
