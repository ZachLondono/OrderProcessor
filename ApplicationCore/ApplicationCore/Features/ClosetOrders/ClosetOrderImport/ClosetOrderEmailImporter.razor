@using Domain.Components
@using static ApplicationCore.Features.ClosetOrders.ClosetOrderImport.OrderImporter
@using static Domain.Components.Button

@switch (_state) {

    case DialogState.Importing:
        <div>
            <span>Importing order...</span>
        </div>
        break;

    case DialogState.Complete:
        <div>
            <span>Order imported to '@_newWorkingDirectory'</span>
        </div>
        <div class="mt-5">
            <Button OnClickAsync="Cancel" Color="ButtonColor.Primary">Close</Button>
        </div>
        break;

    case DialogState.Setup:
        <div>

            @if(_loadingError is not null) {
                <span>@_loadingError</span>
            } else if(_isLoading) {
                <span>Loading Message...</span>
            } else if (_message is null) {
                <span>No Message Selected</span>
            } else {

                <h1 class="font-bold text-lg">Currently Selected Message</h1>

                <div class="mt-3">
                    <span class="text-xs text-gray-500">Sender</span>
                    <div>@_message.SenderName</div>
                    <div>@_message.SenderEmail</div>
                </div>
                <div class="mt-2.5">
                    <span class="text-xs text-gray-500">Subject</span>
                    <div>@_message.Subject</div>
                </div>
                <div class="mt-6">
                    <span class="font-semibold text-md">Working Directory Root</span>
                    <input type="text" class="input-text w-full" @bind-value="_workingDirectoryRoot" />
                </div>
                <div class="mt-3">
                    <h2 class="font-semibold text-md">Order Number</h2>
                    <input type="text" class="input-text w-full" @bind-value="_orderNumber" />
                </div>
                <div class="mt-3">
                    <h2 class="font-semibold text-md">Order Name</h2>
                    <input type="text" class="input-text w-full" @bind-value="_orderName" />
                </div>

                <div class="mt-5 ml-3">
                    <CheckBox @bind-IsChecked="_writeOrderNumber">
                        Write Number to Order Forms
                    </CheckBox>
                </div>

                <div class="mt-10">
                    <table class="ml-3 table">
                        <thead>
                            <tr>
                                <th>File</th>
                                <th>Incoming</th>
                                <th>Orders</th>
                            </tr>
                        </thead>
                        @foreach(var attachment in _message.Attachments) {
                            <tr>
                                <td>@attachment.FileName</td>
                                <td class="text-center">
                                    <CheckBox @bind-IsChecked="attachment.CopyToIncoming" />
                                </td>
                                <td class="text-center">
                                    <CheckBox @bind-IsChecked="attachment.CopyToOrders" />
                                </td>
                            </tr>
                        }
                    </table>
                </div>

                <div class="mt-10">
                    <Button OnClickAsync="ImportSelectedOrder" Class="w-full" Color="ButtonColor.Primary">Import</Button>
                </div>

            }

            <div class="mt-5 text-center">
                <Button OnClick="LoadCurrentMessageDetails" Color="ButtonColor.Secondary">Refresh</Button>
                <Button OnClickAsync="Cancel" Color="ButtonColor.Secondary">Cancel</Button>
            </div>

        </div>
        break;

}

@code {

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [CascadingParameter]
    private BlazoredModalInstance ModalInstance { get; set; } = default!;

    private DialogState _state = DialogState.Setup;

    private string? _loadingError = null;
    private bool _isLoading = false;
    private string _orderNumber = "";
    private string _orderName = "";
    private string _workingDirectoryRoot = "";
    private bool _writeOrderNumber = false;
    private OrderMessage? _message = null;
    private OutlookWrapper? _wrapper = null;
    private OrderImporter? _importer = null;

    private string? _newWorkingDirectory = null;

    protected override void OnAfterRender(bool firstRender) {

        if (!firstRender) return;

        LoadCurrentMessageDetails();

    }

    private void LoadCurrentMessageDetails() {

        _isLoading = true;
        _loadingError = null;
        _message = null;
        _workingDirectoryRoot = "";
        StateHasChanged();

        try {

            if (_wrapper is null) _wrapper = new OutlookWrapper();
            if (!_wrapper.IsInitialized) _wrapper.Initialize();
            var mailItem = _wrapper.GetCurrentlySelectedMailItem();

            if (mailItem is null) {
                _isLoading = false;
                StateHasChanged();
                return;
            }


            _importer = new OrderImporter(mailItem);
            _message =  _importer.GetMessageDetails();
            Dealer? dealer = OrderImporter.Dealers.Where(d => d.IncomingEmail.Equals(_message.SenderEmail)).FirstOrDefault();
            if (dealer is not null) {
                _workingDirectoryRoot = dealer.OutputDirectory;
                _orderNumber = GetNextOrderNumber(dealer.OutputDirectory, dealer.OrderNumberPrefix);
            }

            _isLoading = false;
            StateHasChanged();

        } catch {

            _isLoading = false;
            _message = null;
            _loadingError = "Couldn't get selected email";
            StateHasChanged();

        }

    }

    private async Task ImportSelectedOrder() {

        if (_message is null) {
            _loadingError = "Message not selected";
            StateHasChanged();
            return;
        }

        if (_importer is null) {
            _loadingError = "Could not load order from message";
            StateHasChanged();
            return;
        }

        if (!Directory.Exists(_workingDirectoryRoot)) {
            _loadingError = "Can not access working directory root";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrWhiteSpace(_orderNumber)) {
            _loadingError = "Order number required";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrWhiteSpace(_orderName)) {
            _loadingError = "Order name required";
            StateHasChanged();
            return;
        }

        _state = DialogState.Importing;
        StateHasChanged();

        var order = new ClosetOrder(_orderNumber, _orderName, _message.Attachments);
        await Task.Run(() =>
        {
            _newWorkingDirectory = _importer.ImportOrderFromMailItem(order, _workingDirectoryRoot, _writeOrderNumber);
        });

        _state = DialogState.Complete;
        StateHasChanged();

    }

    private static string GetNextOrderNumber(string workingDirectoryRoot, string orderNumberPrefix) {

        try {

            var subDirs = Directory.EnumerateDirectories(workingDirectoryRoot, $"{orderNumberPrefix}*").Select(d => Path.GetFileName(d)).OfType<string>();

            int maxNum = 0;
            foreach (var subdir in subDirs) {
                var numStr = subdir.Substring(orderNumberPrefix.Length, subdir.IndexOf(' ') - orderNumberPrefix.Length).Trim();
                if (int.TryParse(numStr, out int num)){
                    if (num > 1000) continue;
                    if (num <= maxNum) continue;
                    maxNum = num;
                }
            }

            return $"{orderNumberPrefix}{maxNum + 1}";

        } catch {

            return string.Empty;

        }

    }

    private async Task Cancel() {
        await ModalInstance.CancelAsync();
    }

}
