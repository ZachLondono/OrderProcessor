@using Domain.Components;
@using static Domain.Components.Button;
@using Domain.Infrastructure.Data;
@using System.Diagnostics;
@using Microsoft.Extensions.Logging;
@inject OrderListWidgetViewModel DataContext
@inject ILogger<OrderListWidget> Logger

<table class="w-full table-auto">

    <thead class="border-b border-slate-300">
        <tr>
            @if (IsSelectable) {
                <th class="p-5 text-gray-700"></th>
            }
            <th class="p-5 text-gray-700">Number</th>
            <th class="p-5 text-gray-700">Name</th>
            <th class="p-5 text-gray-700">Customer</th>
            <th class="p-5 text-gray-700">Vendor</th>
            <th class="p-5 text-gray-700">Items</th>
            <th class="p-5 text-gray-700">Order Date</th>
        </tr>
    </thead>

    @if (DataContext.IsLoading) {

        <tr>
            <td colspan="6" class="text-center">

                <div class="flex justify-center mt-5">
                    <svg class="animate-spin h-12 w-12 text-gray-700" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-10" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>

                <div class="my-5 text-gray-500 text-lg">Loading orders</div>

            </td>
        </tr>

    } else if (DataContext.HasError) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-red-600 text-lg">Error loading orders [@DataContext.ErrorMessage]</div>
                <Button Type="button" OnClickAsync="LoadOrders"  Color="ButtonColor.Primary" Disabled="@DataContext.IsLoading">Refresh</Button>
            </td>
        </tr>

    } else if (DataContext.Orders is null) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-gray-500 text-lg">Could not load orders</div>
                <Button Type="button" OnClickAsync="LoadOrders"  Color="ButtonColor.Primary" Disabled="@DataContext.IsLoading">Refresh</Button>
            </td>
        </tr>

    } else if (!DataContext.Orders.Any()) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-gray-500 text-lg">No orders to display.</div>
                <Button Type="button" OnClickAsync="LoadOrders"  Color="ButtonColor.Primary" Disabled="@DataContext.IsLoading">Refresh</Button>
            </td>
        </tr>

    } else {

        <tbody>
            @foreach(var order in DataContext.Orders) {
                <tr class="@RowClass(order)">
                    @if (IsSelectable) {
                        <td class="p-5 whitespace-nowrap border-b" @onclick="() => ToggleOrder(order)">
                            <input type="checkbox" checked="@SelectedOrders.Contains(order)" />
                        </td>
                    }
                    <td class="p-5 whitespace-nowrap border-b" @onclick="() => OpenOrder(order.Id)">@order.Number</td>
                    <td class="p-5 whitespace-nowrap border-b" @onclick="() => OpenOrder(order.Id)">@order.Name</td>
                    <td class="p-5 whitespace-nowrap border-b hover:underline" @onclick="() => DataContext.OpenCustomerPage(order.CustomerId)">@order.CustomerName</td>
                    <td class="p-5 whitespace-nowrap border-b hover:text-underline hover:underline" @onclick="() => DataContext.OpenVendorPage(order.VendorId)">@order.VendorName</td>
                    <td class="p-5 whitespace-nowrap text-center border-b" @onclick="() => OpenOrder(order.Id)">@order.ItemCount</td>
                    <td class="p-5 whitespace-nowrap text-center border-b" @onclick="() => OpenOrder(order.Id)">@order.OrderDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>

    }

</table>
@if (!DataContext.IsLoading && !DataContext.HasError && DataContext.Orders is not null && DataContext.Orders.Any()) {
    <div class="my-3">
        @if (SelectedOrders.Any()) {
            <span class="mr-5">@SelectedOrders.Count selected</span>            
        }
        <span>@DataContext.TotalOrderCount @(DataContext.TotalOrderCount == 1 ? "order" : "orders")</span>
        <div class="float-right">
            <Pagination PageCount="DataContext.PageCount" OnPageSelected="async (i) => await UpdatePage(i)" CurrentPage="DataContext.Page" />
        </div>
    </div>
}

@code {

    [Parameter]
    public Guid? CustomerId { get; set; } 

    [Parameter]
    public Guid? VendorId { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; }

    [Parameter]
    public bool IsSelectable { get; set; } = true;

    [Parameter]
    public HashSet<OrderListItem> SelectedOrders { get; set; } = new();

    public Action<HashSet<OrderListItem>>? SelectedOrdersChanged { get; set; }

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    protected override void OnInitialized() {

        if (DataContext is null) {
            return;
        }

        DataContext.OnPropertyChanged += () => StateHasChanged();

    }

    protected override async Task OnParametersSetAsync() {
        DataContext.Page = 1;
        await LoadOrders();
    }

    private async Task UpdatePage(int page) {
        DataContext.Page = page;
        await LoadOrders();
    }

    private async Task LoadOrders() {

        try {

            await DataContext.LoadOrders(CustomerId, VendorId, SearchTerm);
            DataContext.HasError = false;

        } catch (IncompatibleDatabaseVersion ex) {

            Logger.LogWarning(ex, "Tried to load orders from an incompatable database version");

            DataContext.ErrorMessage = ex.Message;

            await ModalService.OpenErrorDialog(new() {
                    Title = "Could not Load Order List",
                    Details = $"Database version is incompatable with application version. Make sure application is up to date and database is the correct version for the application.<br><br><small>Error Message:<br>{ex.Message}</small>"
                }, ModalSize.Automatic);

        } catch (Exception ex) {

            Logger.LogError(ex, "Exception thrown while loading order list");

            DataContext.ErrorMessage = ex.Message;

            await ModalService.OpenErrorDialog(new() {
                    Title = "Could not load orders",
                    Details = $"An exception was thrown while trying to load orders<br><br><small>Error Message:<br>{ex.Message}</small>"
                }, ModalSize.Automatic);

        }

    }

    private async Task OpenOrder(Guid orderId) {

        try {
            DataContext.OpenOrder(orderId);
        } catch (IncompatibleDatabaseVersion ex) {

            Logger.LogWarning(ex, "Tried to load orders from an incompatible database version");

            DataContext.ErrorMessage = ex.Message;

            await ModalService.OpenErrorDialog(new() {
                    Title = "Could not Load Order",
                    Details = $"Database version is incompatible with application version. Make sure application is up to date and database is the correct version for the application.<br><br><small>Error Message:<br>{ex.Message}</small>"
                }, ModalSize.Automatic);

        } catch (Exception ex) {

            Logger.LogError(ex, "Exception thrown while trying to open order details page");

            await ModalService.OpenErrorDialog(new() {
                    Title = "Error Opening Order",
                    Details = $"An error occurred while trying to open order.<br><br><small>Error Message:<br>{ex.Message}</small>"
            }, ModalSize.Automatic);


        }

    }

    public void ToggleOrder(OrderListItem order) {

        if (SelectedOrders.Contains(order)) {

            SelectedOrders.Remove(order);

        } else {

            SelectedOrders.Add(order);

        }

        SelectedOrdersChanged?.Invoke(SelectedOrders);

    } 

    public string RowClass(OrderListItem order) {
        if (SelectedOrders.Contains(order)) {
            return "justify-center hover:bg-slate-200 bg-blue-200 cursor-pointer";
        } else {
            return "justify-center hover:bg-slate-200 cursor-pointer";
        }
    }

}
