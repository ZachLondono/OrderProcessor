@using ApplicationCore.Features.OpenDoorOrders
@using Domain.Infrastructure.Bus
@using Domain.Components
@using Domain.Components.ProgressModal
@using ApplicationCore.Shared.Services
@using Domain.Services
@using ApplicationCore.Features.GetJobCutListDirectory

@if (_errorMessage is not null) {
    <span class="font-semibold text-red-600">@_errorMessage</span>
}

<EditForm Model="Model">

    <div>
        <label class="font-semibold">Workbook -</label>
        <span class="ml-5">@Model.WorkbookFilePath</span>

        <div class="ml-5 text-sm text-gray-700">
            <div>
                <label>
                    <InputCheckbox @bind-Value="Model.IncludeCover" />
                    Cover
                </label>
            </div>
            <div>
                <label>
                    <InputCheckbox @bind-Value="Model.IncludePackingList" />
                    Packing List
                </label>
            </div>
            <div>
                <label>
                    <InputCheckbox @bind-Value="Model.IncludeInvoice" />
                    Invoice
                </label>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <label>
            <InputCheckbox @bind-Value="Model.GenerateGCodeFromWorkbook" />
            <span class="text-gray-700">Generate GCode</span>
        </label>
    </div>

    <div class="mt-3">
        <label>
            <InputCheckbox @bind-Value="Model.AddExistingWSXMLReport" />
            <span class="text-gray-700">Existing GCode (WSXML)</span>
        </label>
        @if (Model.AddExistingWSXMLReport) {
            <div>
                <Button Color="Button.ButtonColor.Secondary" OnClick="ChooseReportFile" Class="mr-5">Choose Report</Button>
                @if (string.IsNullOrEmpty(Model.WSXMLReportFilePath)) {
                    <span>None selected</span>
                } else {
                    <span>@Model.WSXMLReportFilePath</span>
                }
            </div>
        }
    </div>

    <div class="mt-3">
        <label>
            <InputCheckbox @bind-Value="Model.AddExistingCSVTokens" />
            <span class="text-gray-700">Existing Tokens (CSV)</span>
        </label>
        @if (Model.AddExistingCSVTokens) {
            <div>
                <Button Color="Button.ButtonColor.Secondary" OnClick="ChooseCSVTokenFile" Class="mr-5">Choose File</Button>
                @if (string.IsNullOrEmpty(Model.CSVTokenFilePath)) {
                    <span>None selected</span>
                } else {
                    <span>@Model.CSVTokenFilePath</span>
                }
            </div>
        }
    </div>

    <div class="mt-3">
        <label>
            <InputCheckbox @bind-Value="Model.PrintFile" />
            <span class="text-gray-700">Print</span>
        </label>
    </div>

    <div class="mt-3">
        <label>
            <span class="text-gray-700">
                File Name
            </span>
            <InputText @bind-Value="Model.FileName" class="input-text w-full" spellcheck="false" />
        </label>
    </div>

    <div class="mt-3">
        <label >
            <span class="text-gray-700">
                Output Directory
            </span>
            <InputText @bind-Value="Model.OutputDirectory" class="input-text w-full" spellcheck="false" />
        </label>
    </div>

    <div class="mt-3">
        <label class="font-semibold">
            <InputCheckbox @bind-Value="Model.SendEmail" />
            <span class="text-gray-700">Send Email</span>
        </label>
        @if (Model.SendEmail) {
            <div class="ml-3">
                <div>
                    <label>
                        <InputCheckbox @bind-Value="Model.PreviewEmail" />
                        <span class="text-gray-700 text-sm">Preview email before sending</span>
                    </label>
                </div>
                <label>
                    <span class="text-sm font-medium text-gray-700">Email Recipients</span>
                    <InputText @bind-Value="Model.EmailRecipients" class="input-text w-full" placeholder="example@email.com" />
                </label>
            </div>
        }
    </div>

    <div class="my-5 text-center">
        <Button Color="Button.ButtonColor.Primary" class="mt-3" OnClickAsync="GenerateDoorOrderRelease">Generate PDF</Button>
    </div>

</EditForm>

@code {

    [Parameter]
    public DoorOrder? Order { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Inject]
    public IBus? Bus { get; set; }

    [Inject]
    public DoorOrderReleaseActionRunnerFactory? ActionRunnerFactory { get; set; }

    [Inject]
    public IFilePicker? FilePicker { get; set; }

    public DoorOrderReleaseOptions Model { get; set; } = new();

    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync() {

        if (Order is null || Bus is null) return;

        string outputDirectory = @"R:\Door Orders\Door Programs";
        var outputDirResult = await Bus.Send(new GetJobOrderCutListDirectory.Query(Order.OrderFileDirectory, outputDirectory));
        outputDirResult.OnSuccess(dir => outputDirectory = dir);

        bool includeInvoice = false;
        string emailRecipients = "maciej@royalcabinet.com";
        if (!Order.Vendor.ToLowerInvariant().Contains("royal")) {
            emailRecipients += ";toya@royalcabinet.com";
            includeInvoice = true;
        }

        Model = new DoorOrderReleaseOptions() {

				WorkbookFilePath = Order.OrderFile,
				GenerateGCodeFromWorkbook = false,

                AddExistingWSXMLReport = false,
                WSXMLReportFilePath = "",

                AddExistingCSVTokens = false,
                CSVTokenFilePath = "",

                IncludeCover = true,
                IncludePackingList = true,
                IncludeInvoice = includeInvoice,

				FileName = $"{Order.OrderNumber} - MDF Door Cut List",
				OutputDirectory = outputDirectory,

				SendEmail = true,
				EmailRecipients = emailRecipients,

			};

        StateHasChanged();

        var file = await GetReportFile(Order.OrderNumber);
        if (file is not null) {
            Model.WSXMLReportFilePath = file; // TODO: allow for multiple files
            Model.AddExistingWSXMLReport = true;
        } else {
            Model.GenerateGCodeFromWorkbook = true;
        }

    }

    private static async Task<string?> GetReportFile(string number) {
        return await Task.Run(() => {
            try {

                var files = Directory.GetFiles(@"Y:\CADCode\Reports\", $"{number}* - *.xml");
                return files.OrderByDescending(file => new FileInfo(file).LastWriteTime)
                            .FirstOrDefault();

            } catch {
                return null;
            }
        });
    }

    private void ChooseReportFile()
        => FilePicker!.PickFile(new() {
                Title = "Select CADCode WS Report File",
                InitialDirectory = @"Y:\CADCode\Reports",
                Filter = new("CADCode WS Report", "xml"),
            }, (fileName) => {
            Model.WSXMLReportFilePath = fileName;
            InvokeAsync(StateHasChanged);
        });

    private void ChooseCSVTokenFile()
        => FilePicker!.PickFile(new() {
                Title = "Select CADCode CSV Token File",
                InitialDirectory = @"R:\Door Orders\CC Input",
                Filter = new("CADCode CSV Token File", "csv"),
            }, (fileName) => {
            Model.CSVTokenFilePath = fileName;
            InvokeAsync(StateHasChanged);
        });

    private async Task GenerateDoorOrderRelease() {

        if (ActionRunnerFactory is null || Order is null) return;

        if (!ValidateModel()) {
            StateHasChanged();
            return;
        }

        var actionRunner = ActionRunnerFactory.CreateActionRunner(Order, Model);

        var parameters = new ModalParameters() {
            { "ActionRunner",  actionRunner },
            { "InProgressTitle", "Releasing Order..." },
            { "CompleteTitle", "Release Complete" }
        };

        var options = new ModalOptions() {
            HideHeader = true,
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            Size = ModalSize.Large
        };

        var dialog = Modal.Show<ProgressModal>("Order Release Progress", parameters, options);
        _ = await dialog.Result;

        await BlazoredModal.CloseAsync();

    }

    private bool ValidateModel() {

        _errorMessage = null;

        if (Model.AddExistingWSXMLReport) {

            if (string.IsNullOrWhiteSpace(Model.WSXMLReportFilePath)) {

                _errorMessage = "Select a WSXML report or uncheck the 'Existing GCode' option.";
                return false;

            }

            if (!File.Exists(Model.WSXMLReportFilePath)) {

                _errorMessage = "Selected WSXML file can not be found.";
                return false;

            }

        }

        if (Model.AddExistingCSVTokens) {

            if (string.IsNullOrWhiteSpace(Model.CSVTokenFilePath)) {

                _errorMessage = "Select a CSV Token file or uncheck 'Existing Tokens' option.";
                return false;

            }

            if (!File.Exists(Model.CSVTokenFilePath)) {

                _errorMessage = "Selected CSV Token file can not be found";
                return false;

            }

        }


        if (!Directory.Exists(Model.OutputDirectory)) {

            _errorMessage = "Output directory does not exist or cannot be accessed.";
            return false;

        }

        if (Model.SendEmail && string.IsNullOrWhiteSpace(Model.EmailRecipients)) {

            _errorMessage = "Specify email recipients or uncheck 'Send Email' option.";
            return false;

        }

        return true;

    }

}
