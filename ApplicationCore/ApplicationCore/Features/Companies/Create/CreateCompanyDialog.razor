@using ApplicationCore.Infrastructure
@inject IBus Bus
@inject CompanyState CompanyState

<EditForm Model="_companyModel" OnValidSubmit="CreateCompanyAndExit">
    <div>
        <label>Company Name</label>
        <InputText @bind-Value="_companyModel.Name" class="border-b focus:outline-0 active:outline-0 bg-transparent"></InputText>
    </div>
    <button type="submit" class="rounded-md px-7 py-2 bg-blue-700">Create</button>
</EditForm>


@code {

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private NewCompanyModel _companyModel = new();

    protected override void OnInitialized() {
        BlazoredModal.SetTitle("New Company");
    }

    private async Task CreateCompanyAndExit() {
        var result = await Bus.Send(new Companies.Commands.CreateCompany.Command(_companyModel.Name, new(), "", "", ""));
        result.Match(
            newCompany => { 
                CompanyState.ReplaceCompany(newCompany);
            },
            error => {
                // TOOD: display error
            }
        );
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

    class NewCompanyModel {

        public string Name { get; set; } = string.Empty;

    }

}
