@page "/companies/details"
@using ApplicationCore.Features.Companies.Domain.ValueObjects
@using ApplicationCore.Features.Orders
@using ApplicationCore.Features.Orders.Shared.State;
@using ApplicationCore.Infrastructure;
@using ApplicationCore.Infrastructure.Bus
@inject CompanyState CompanyState
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject IBus Bus

@if (CompanyState.Company is null) {
    <span>No company selected.</span>
} else {

    <EditForm Model="@_companyModel" OnValidSubmit="@SaveChanges">
		<div class="flex">
			<div class="flex-grow">
				<label id="name" class="text-lg w-24 inline-block dark:text-gray-400">Name</label>
				<InputText for="name" @bind-Value="_companyModel.Name" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div class="mb-4">
				<button type="submit" class="btn btn-primary w-48">
					@if (_isSaving) {
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    }
					<span>Save</span>
				</button>
				<button class="btn btn-secondary w-48 mt-2 lg:mt-0 lg:ml-3" @onclick="ViewReleaseProfile">Release Settings</button>
				<button class="btn btn-secondary w-48 mt-2 lg:mt-0 lg:ml-3" @onclick="ViewCompleteProfile">Complete Settings</button>
			</div>
		</div>

		<fieldset class="mb-8">
			<header>
				<h3 class="text-lg dark:text-gray-400">Contact</h3>
			</header>
			<div>
				<label id="phone" class="text-lg w-48 inline-block dark:text-gray-400">Phone</label>
				<InputText @bind-Value="_companyModel.PhoneNumber" for="phone" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="invoice" class="text-lg w-48 inline-block dark:text-gray-400">Invoice Email</label>
				<InputText @bind-Value="_companyModel.InvoiceEmail" for="invoice" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="confirmation" class="text-lg w-48 inline-block dark:text-gray-400">Confirmation Email</label>
				<InputText @bind-Value="_companyModel.ConfirmationEmail" for="confirmation" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="contact" class="text-lg w-48 inline-block dark:text-gray-400">Contact</label>
				<InputText @bind-Value="_companyModel.ContactName" for="confirmation" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
		</fieldset>

		<fieldset>
			<header>
				<h3 class="text-lg dark:text-gray-400">Address</h3>
			</header>
			<div>
				<label id="line1" class="text-lg w-24 inline-block dark:text-gray-400">Line 1</label>
				<InputText @bind-Value="_companyModel.Address.Line1" for="line1" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="line2" class="text-lg w-24 inline-block dark:text-gray-400">Line 2</label>
				<InputText @bind-Value="_companyModel.Address.Line2" for="line2" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="line3" class="text-lg w-24 inline-block dark:text-gray-400">Line 3</label>
				<InputText @bind-Value="_companyModel.Address.Line3" for="line3" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="city" class="text-lg w-24 inline-block dark:text-gray-400">City</label>
				<InputText @bind-Value="_companyModel.Address.City" for="city" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="state" class="text-lg w-24 inline-block dark:text-gray-400">State</label>
				<InputText @bind-Value="_companyModel.Address.State" for="state" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="zip" class="text-lg w-24 inline-block dark:text-gray-400">Zip</label>
				<InputText @bind-Value="_companyModel.Address.Zip" for="zip" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
			<div>
				<label id="country" class="text-lg w-24 inline-block dark:text-gray-400">Country</label>
				<InputText @bind-Value="_companyModel.Address.Country" for="country" class="text-xl w-64 border-b focus:outline-0 active:outline-0 bg-transparent dark:text-white"></InputText>
			</div>
		</fieldset>

		<section class="mt-10">
			<header>
				<h3 class="text-lg dark:text-gray-400">Orders</h3>
			</header>
			<div class="rounded-sm">
				@if (_orders is null || !_orders.Any()) {
					<span class="dark:text-gray-500">No orders to show</span>
				} else {
					<table class="w-full table-auto">
						<thead class="border-b border-slate-300">
							<tr class="dark:bg-slate-700 dark:text-gray-500">
								<th class="p-5">Number</th>
								<th class="p-5">Name</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var order in _orders) {
								<tr class="justify-center hover:bg-slate-200 dark:hover:bg-slate-500 cursor-pointer" @onclick="() => OpenOrder(order.Id)">
									<td class="p-5 border-b dark:border-slate-500 dark:text-white">@order.Number</td>
									<td class="p-5 border-b dark:border-slate-500 dark:text-white">@order.Name</td>
								</tr>
							}
						</tbody>
					</table>
				}
			</div>
		</section>

	</EditForm>

}

@code {

	private IEnumerable<CompanyOrderListItem>? _orders = null;

	private CompanyModel _companyModel = new();
	private bool _isSaving = false;

	protected override async Task OnInitializedAsync() {

		if (CompanyState.Company is null) return;
		var result = await Bus.Send(new GetOrdersByCompanyId.Query(CompanyState.Company.Id));

		result.Match(
			orders => _orders = orders,
			error => {
				// TODO: display error
			}
		);

		var company = CompanyState.Company;
		_companyModel = new() {
                Name = company.Name,
                Address = company.Address,
				PhoneNumber = company.PhoneNumber,
				InvoiceEmail = company.InvoiceEmail,
				ContactName = company.ContactName,
				ConfirmationEmail = company.ConfirmationEmail,
            };
	}

	private void ViewReleaseProfile() {
		NavigationManager.NavigateTo("/companies/releaseprofile", true);
	}

	private void ViewCompleteProfile() {
		NavigationManager.NavigateTo("/companies/completeprofile", true);
	}

	private async Task OpenOrder(Guid orderId) {
		await OrderState.LoadOrder(orderId);
		NavigationManager.NavigateTo("/orders/details", true);
	}

	private async Task SaveChanges() {
		_isSaving = true;
		CompanyState.UpdateCompany(_companyModel.Name, _companyModel.Address, _companyModel.PhoneNumber, _companyModel.InvoiceEmail, _companyModel.ConfirmationEmail, _companyModel.ContactName);
		await CompanyState.SaveChanges();
		_isSaving = false;
	}

	class CompanyModel {

		public string Name { get; set; } = string.Empty;

		public string PhoneNumber { get; set; } = string.Empty;

		public string InvoiceEmail { get; set; } = string.Empty;

		public string ConfirmationEmail { get; set; } = string.Empty;

		public string ContactName { get; set; } = string.Empty;

        public Address Address { get; set; } = new();

    }

}
