@using Domain.Components
@using System.Diagnostics;
@using ApplicationCore.Shared.Services;
@using Domain.Services;
@inject ReleasePDFDialogViewModel DataContext
@inject IFilePicker FilePicker 

@if (DataContext.Error is not null) {
    <div class="mb-5">
        <span class="text-red-600 font-bold">@DataContext.Error</span>    
    </div>
}

@if (DataContext.IsGeneratingPDF) {

    <div class="text-center mb-4 font-bold text-blue-700">Generating PDF...</div>
    <svg class="animate-spin mx-auto h-12 w-12 text-blue-700" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-10" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>

} else if (DataContext.GeneratedFiles.Any()) {

    <div class="text-center mb-2 font-bold text-green-500">Done.</div>
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mx-auto h-14 w-14 text-green-700">
        <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>

    <div class="ml-5 mt-5">
        <h3>PDFs Generated:</h3>
        <ul class="list-disc">
        @foreach (var fileName in DataContext.GeneratedFiles) {
            <li>
                <a onclick="@(() => OpenFile(fileName))" class="underline cursor-pointer">@fileName</a> 
            </li>
        }
        </ul>
    </div>

    <div class="my-5 text-center">
        <Button OnClick="InitializeModel">Generate Another PDF</Button>
    </div>

} else {

    <EditForm Model="@DataContext.Model">

        <div>
            <Button Color="Button.ButtonColor.Secondary" OnClick="ChooseReportFile" Class="mr-5">Choose Report</Button>
            @if (string.IsNullOrEmpty(DataContext.Model.ReportFilePath)) {
                <span>None selected</span>
            } else {
                <span>@DataContext.Model.ReportFilePath</span>
            }
        </div>

        <div class="mt-3">
            <label class="font-semibold">Customer</label>
            <InputText @bind-Value="DataContext.Model.CustomerName" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Vendor</label>
            <InputText @bind-Value="DataContext.Model.VendorName" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Order Date</label>
            <InputDate @bind-Value="DataContext.Model.OrderDate" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Output directory</label>
            <InputText @bind-Value="DataContext.Model.OutputDirectory" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">File name</label>
            <InputText @bind-Value="DataContext.Model.FileName" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <CheckBox @bind-IsChecked="DataContext.Model.SendEmail">
                <span class="font-semibold">Send Email</span>
            </CheckBox>
            @if (DataContext.Model.SendEmail) {
                <InputText @bind-Value="DataContext.Model.EmailRecipients" class="mb-3 input-text w-full" placeholder="example@email.com" />
            }
        </div>

        <div>
            <CheckBox @bind-IsChecked="DataContext.Model.AttachAdditionalFiles">
                <span class="font-semibold">Additional Files</span>
            </CheckBox>
            @if (DataContext.Model.AttachAdditionalFiles) {
                     <div class="mt-3 ml-3">
                        <div>
                            <Button OnClick="ChooseAdditionalFile" Color="Button.ButtonColor.Secondary">+ Add File</Button>
                        </div>

                        @if (DataContext.Model.AdditionalFilePaths.Any()) {
                            foreach (var file in DataContext.Model.AdditionalFilePaths) {
                                <div class="text-sm">
                                    <Button OnClick="@(() => RemoveAdditionalFile(file))">X</Button>@TruncateString(file)
                                </div>
                            }
                        } else {
                            <div class="text-sm">No File Selected</div>
                        }
                    </div>                           
            }
        </div>
    
        <div class="my-5 text-center">
            <Button OnClickAsync="DataContext.GeneratePDF" Color="Button.ButtonColor.Primary" class="mt-3">Generate PDF</Button>
            <Button OnClick="InitializeModel" Color="Button.ButtonColor.Secondary" class="mt-3">Refresh</Button>
        </div>
    
    </EditForm>

}

@code {

    [Parameter]
    public string? ReportFilePath { get; init; } = null;

    [Parameter]
    public string? CustomerName { get; init; } = null;

    [Parameter]
    public string? VendorName { get; init; } = null;

    [Parameter]
    public string? OutputDirectory { get; init; } = null;

    [Parameter]
    public string? FileName { get; init; } = null;

    [Parameter]
    public bool? SendEmail { get; init; } = false;

    [Parameter]
    public string? EmailRecipients { get; init; } = null;

    protected override void OnInitialized() {
        base.OnInitialized();
        DataContext.OnPropertyChanged += StateHasChanged;

        InitializeModel();
    }

    private void InitializeModel() {

        DataContext.Reset();

        if (ReportFilePath is not null && File.Exists(ReportFilePath)) {
            DataContext.Model.ReportFilePath = ReportFilePath ?? string.Empty;
        }
        DataContext.Model.CustomerName = CustomerName ?? string.Empty;
        DataContext.Model.VendorName = VendorName ?? string.Empty;
        DataContext.Model.FileName = FileName ?? string.Empty;
        DataContext.Model.OutputDirectory = OutputDirectory ?? DataContext.Model.OutputDirectory;
        DataContext.Model.EmailRecipients = EmailRecipients ?? DataContext.Model.EmailRecipients;
        DataContext.Model.SendEmail = SendEmail ?? DataContext.Model.SendEmail;

        DataContext.FindMostRecentReport();

    }

    private void ChooseReportFile()
        => FilePicker.PickFile(new() {
            Title = "Select CADCode WS Report File",
            InitialDirectory = @"Y:\CADCode\Reports", 
            Filter = new("CADCode WS Report", "xml"),
        }, (fileName) => {
            DataContext.Model.ReportFilePath = fileName;
            InvokeAsync(StateHasChanged);
        });

    public void OpenFile(string filePath) {

        try {

            var psi = new ProcessStartInfo {
                FileName = filePath,
                UseShellExecute = true
            };
            Process.Start(psi);

        } catch (Exception ex) {
            Debug.WriteLine(ex);
        }

    }

    public void ChooseAdditionalFile() 
        => FilePicker.PickFiles(new() {
            Title = "Select Additional File to Attach",
            Filter = new("PDF File", "pdf")
        }, (fileNames) => {
            DataContext.Model.AdditionalFilePaths.AddRange(fileNames);
            InvokeAsync(StateHasChanged);
        });


    public void RemoveAdditionalFile(string filePath) {
        DataContext.Model.AdditionalFilePaths.Remove(filePath);
        StateHasChanged();
    }

    private string TruncateString(string value) {

        if (value.Length < 50) return value;

        return $"...{value[(value.Length - 27)..]}";

    }

}
