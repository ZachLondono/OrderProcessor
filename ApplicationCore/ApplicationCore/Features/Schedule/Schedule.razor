@page "/"
@using ApplicationCore.Features.Orders.Domain
@using ApplicationCore.Infrastructure
@using ApplicationCore.Shared.Components
@using static ApplicationCore.Shared.Components.Button;
@inject IBus Bus

@*
<Button Disabled="@Disabled" Style="ButtonStyle.Contained" Rounded="ButtonRounded.Left" Class="my-3">Click Me!</Button>@*
<Button Disabled="@Disabled" Style="ButtonStyle.Contained" Rounded="ButtonRounded.None" Class="my-3">Click Me!</Button>
<Button Disabled="@Disabled" Style="ButtonStyle.Contained" Rounded="ButtonRounded.Right" Class="my-3">Click Me!</Button>

<Button Disabled="@Disabled" Color="ButtonColor.Secondary" Style="ButtonStyle.Contained" Class="my-3">Click Me!</Button>
<Button Disabled="@Disabled" Color="ButtonColor.Secondary" Style="ButtonStyle.Outline" Class="my-3">Click Me!</Button>
<Button Disabled="@Disabled" Color="ButtonColor.Secondary" Style="ButtonStyle.Text" Class="my-3">Click Me!</Button>

<Button Disabled="@Disabled" Color="ButtonColor.Success" Style="ButtonStyle.Contained" Class="my-3">Click Me!</Button>
<Button Disabled="@Disabled" Color="ButtonColor.Success" Style="ButtonStyle.Outline" Class="my-3">Click Me!</Button>
<Button Disabled="@Disabled" Color="ButtonColor.Success" Style="ButtonStyle.Text" Class="my-3">Click Me!</Button>

<Button OnClick="() => Disabled = !Disabled" Style="ButtonStyle.Text" Class="my-3">Click Me!</Button>


<EditForm Model="@_model">
    <div>
        <label for="startdate">Start Date</label>
        <InputDate id="startdate" Value="@_model.StartDate" TValue="DateTime" ValueChanged="OnStartDateSet" ValueExpression="() => _model.StartDate"></InputDate>
    </div>
    <div>
        <label for="enddate">End Date</label>
        <InputDate id="enddate" Value="@_model.EndDate" TValue="DateTime" ValueChanged="OnEndDateSet" ValueExpression="() => _model.EndDate"></InputDate>
    </div>
</EditForm>

<Button Style="ButtonStyle.Outline" Class="my-3" OnClickAsync="GenerateProductionReport">Print Report</Button>

<Switch @bind-IsChecked="Disabled" />

@if (_hasError) {
    <div class="bg-red-500 text-white font-bold">@_errorMessage</div>
}

<div class="mt-3">
    <span>Vendors</span>
    @foreach (var vendor in _vendors) {
        <div>
            <input type="checkbox" checked="@vendor.Active" @onclick="@(() => ToggleCompany(vendor))"/>
            <label class="text-black">@vendor.Name</label>
        </div>
    }
</div>

<div class="my-3">
    <span>Customers</span>
    @foreach (var customer in _customers) {
        <div>
            <input type="checkbox" checked="@customer.Active" @onclick="@(() => ToggleCompany(customer))"/>
            <label class="text-black">@customer.Name</label>
        </div>
    }
</div>

<table class="table table-hover">

    <thead>
        <tr>
            <th>Status</th>
            <th>Number</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>

    <tbody>

        @{
            bool showHeaders = (_ordersByDate.Keys.Count > 1);
            foreach (var date in _ordersByDate.Keys) {
                var orders = _ordersByDate[date].Where(IsActive).ToList();
                if (!orders.Any()) continue;
                @if (showHeaders) {
                    <tr>
                        <th colspan="4" class="text-center">@date.ToShortDateString() (@orders.Count)</th>
                    </tr>
                }
                @foreach (var order in orders) {
                    <tr class="cursor-pointer h-16">
                        <td>
                            <span class="@($"pill {order.Status.GetColor()}")">@order.Status</span>
                        </td>
                        <td>@order.Number</td>
                        <td>@order.Name</td>
                        <td>
                            <button class="btn-primary text-xs" hidden="@(order.Status != Status.Released)">Complete</button>
                        </td>
                    </tr>
                }
            }
        }

    </tbody>

    <tfoot>

        <tr>
            <td colspan="4" class="text-center">@(_ordersByDate.Values.SelectMany(o=>o).Count(IsActive)) Orders</td>
        </tr>

    </tfoot>

</table>
*@
@code {
    private bool _disabled;
    public bool Disabled {
        get => _disabled;
        set {
            _disabled = value;
            StateHasChanged();
        }
    }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private DateModel _model = new();
    private bool _hasError = false;
    private string _errorMessage = "";
    private Dictionary<DateOnly, List<ScheduledOrder>> _ordersByDate = new();
    private List<Company> _vendors = new();
    private List<Company> _customers = new();

    protected override async Task OnInitializedAsync() {
        await OnDateChange();
    }

    private async Task OnStartDateSet(DateTime date) {
        _model.StartDate = date;
        await OnDateChange();
    }

    private async Task OnEndDateSet(DateTime date) {
        _model.EndDate = date;
        await OnDateChange();
    }

    private async Task OnDateChange() {

        var startDate = _model.StartDate;
        var endDate = _model.EndDate.AddDays(1).AddSeconds(-1);

        var response = await Bus.Send(new GetOrdersByDate.Query(startDate, endDate));
        response.Match(
            orders => {

                _vendors = orders.Select(o => o.VendorName)
                                .Distinct()
                                .Select(v => new Company(v, true))
                                .ToList();

                _customers = orders.Select(o => o.CustomerName)
                                .Distinct()
                                .Select(v => new Company(v, true))
                                .ToList();

                _ordersByDate = orders.GroupBy(o => DateOnly.FromDateTime(o.ProductionDate))
                                        .ToDictionary(k => k.Key, g => g.ToList());

                _hasError = false;

            },
            error => {
                // TODO: log error
                _hasError = true;
                _errorMessage = error.Details;
            }
        );

    }

    private void ToggleCompany(Company company) {
        company.Toggle();
        StateHasChanged();
    }

    private bool IsActive(ScheduledOrder order) {
        bool activeCustomer = _customers.Any(c => c.Active && order.CustomerName.Equals(c.Name));
        bool activeVendor = _vendors.Any(v => v.Active && order.VendorName.Equals(v.Name));
        return activeCustomer && activeVendor;
    }

    private async Task GenerateProductionReport() {
        var allOrders = _ordersByDate.Values.SelectMany(o => o);

        var parameters = new ModalParameters().Add("Orders", allOrders);
        var options = new ModalOptions() {
                HideCloseButton = true,
                DisableBackgroundCancel = true,
                Size = ModalSize.Medium
            };

        var dialog = Modal.Show<ReportDialog>("Generating Report", parameters, options);
        _ = await dialog.Result;
    }

    public class DateModel {
        public DateTime StartDate { get; set; } = DateTime.Today;
        public DateTime EndDate { get; set; } = DateTime.Today;
    }

    public class Company {
        public string Name { get; }
        public bool Active { get; set; } = true;
        public Company(string name, bool active) {
            Name = name;
            Active = active;
        }
        public void Toggle() {
            Active = !Active;
        }
    }

}
