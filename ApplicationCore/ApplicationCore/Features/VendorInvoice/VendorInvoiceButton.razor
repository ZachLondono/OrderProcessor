@using Domain.Components
@using Domain.Infrastructure.Bus
@using Microsoft.Extensions.Logging
@using static Domain.Components.Button

<Button OnClickAsync="CreateVendorInvoiceAsync" Type="button" Disabled="_isExecuting" Class="flex justify-center items-center h-10 w-36" Color="ButtonColor.Secondary">
    @if (_isExecuting) {
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span>Generating</span>
    } else {
        <span>Vendor Invoice</span>
    }
</Button>

@code {

    [Parameter]
    [EditorRequired]
    public Guid OrderId { get; set; }

    [Inject]
    public VendorInvoiceService VendorInvoiceService { get; set; } = default!;

    [Inject]
    public IModalService Modal { get; set; } = default!;

    [Inject]
    public ILogger<VendorInvoiceButton> Logger { get; set; } = default!;

    private bool _isExecuting = false;

    public async Task CreateVendorInvoiceAsync() {

        _isExecuting = true;

        try {

            var file = await VendorInvoiceService.CreateInvoice(OrderId);
            await Modal.OpenInformationDialog("Vendor Invoice Created", "The vendor invoice has been created successfully.", InformationDialog.MessageType.Information);

        } catch (Exception ex) {

            Logger.LogError(ex, "Exception thrown while creating vendor invoice");

            await Modal.OpenErrorDialog(new Error() {
                Title = "Error Generating Invoice",
                Details = "An error occurred while trying to generate the vendor invoice"
            });

        }

        _isExecuting = false;

    }

}
