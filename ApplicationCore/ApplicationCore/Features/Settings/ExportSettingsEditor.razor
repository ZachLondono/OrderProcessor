@using Domain.Infrastructure.Bus
@using Domain.Components
@using static Domain.Components.Button
@using ApplicationCore.Shared.Settings;
@using Microsoft.Extensions.Logging;
@using Domain.Infrastructure.Settings;

@if (_error is not null) {
    
    <div class="text-red-600">
        <h3>@_error.Title</h3>
        <span>@_error.Details</span>
    </div>

} else if (_settings is not null) {

    <EditForm Model="_settings" OnValidSubmit="SaveChanges">

        <div>
            <label>EXT Output</label>
            <InputText @bind-Value="_settings.EXTOutputDirectory" class="input-text w-full" />
        </div>

        <div>
            <label>CSV Output</label>
            <InputText @bind-Value="_settings.CSVOutputDirectory" class="input-text w-full" />
        </div>

        <div>
            <label>MDF Door Workbook</label>
            <InputText @bind-Value="_settings.MDFDoorTemplateFilePath" class="input-text w-full" />
        </div>

        <div>
            <label>Dovetail DB Workbook</label>
            <InputText @bind-Value="_settings.DovetailTemplateFilePath" class="input-text w-full" />
        </div>

        @if (_allowSaving) {
            <div class="my-5">
                <Button type="submit" Color="ButtonColor.Primary">Save</Button>
            </div>
        }

    </EditForm>

}
@code {

    #if DEBUG
    private readonly bool _allowSaving = true;
#else 
    private readonly bool _allowSaving = false;
#endif

    private Error? _error = null;

    private ExportSettings? _settings = null;

    [Inject]
    public IWritableOptions<ExportSettings>? Options { get; set; }

    [Inject]
    public ILogger<ExportSettingsEditor>? Logger { get; set; }

    protected override void OnInitialized() {

        if (Options is null) return;

        try {
            _settings = Options.Value;
        } catch (Exception ex) {
            Logger?.LogError(ex, "Exception thrown while trying to load export settings.");
        }

        if (_settings is null) {

            _error = new() {
                Title = "Error",
                Details = "Settings could not be loaded"
            };

        } else {
            _error = null;
        }

    }

    private void SaveChanges() {

        if (Options is null || _settings is null) return;

        try {

            Options.Update(settings => {
                settings.EXTOutputDirectory = _settings.EXTOutputDirectory;
                settings.CSVOutputDirectory = _settings.CSVOutputDirectory;
                settings.MDFDoorTemplateFilePath = _settings.MDFDoorTemplateFilePath;
                settings.DovetailTemplateFilePath = _settings.DovetailTemplateFilePath;
            });

            _error = null;

        } catch (Exception ex) {

            Logger?.LogError(ex, "Exception thrown while trying to save export settings.");

            _error = new() {
                Title = "Error",
                Details = "Changes could not be saved"
            };

        }

    }


}
