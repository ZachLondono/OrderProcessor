@using Domain.Components
@using static Domain.Components.Button
@using static ApplicationCore.Features.MDFDoorOrders.ProcessHafeleMDFOrder.ProcessOptions
@using Domain.Services;
@inject IFilePicker FilePicker 

<form>

    <div>
        <Button OnClick="ChooseFile" Color="@(string.IsNullOrEmpty(Options.DataFile) ? ButtonColor.Primary : ButtonColor.Secondary)" Style="ButtonStyle.Contained" Size="ButtonSize.Small">Select File</Button>
        @if (string.IsNullOrEmpty(Options.DataFile)) {
            <span class="ml-5">No file chosen...</span>
        } else {
            <span class="ml-5">@Path.GetFileName(Options.DataFile)</span>
        }
    </div>

    <div class="mt-5 flex items-center gap-2">
        <label for="hafelePO">Hafele PO</label>
        <input class="input-text flex-1" id="hafelePO" @bind-value="Options.HafelePO" />
    </div>

    @if (!string.IsNullOrWhiteSpace(Options.DataFile)) {

        <hr class="my-10" />

        <div>
            <CheckBox @bind-IsChecked="@Options.FillOrderSheet">
                Fill Order Sheet
            </CheckBox>
        </div>

        @if (Options.FillOrderSheet) {

            <div class="ml-3 mt-3">
                <label for="templateFilePath">Order Sheet Template</label>
                <input class="input-text w-full" id="templateFilePath" @bind-value="Options.OrderSheetTemplatePath" />
            </div>

            <div class="ml-3 mt-3">
                <label for="orderOutputDirectory">Output Directory</label>
                <input class="input-text w-full" id="orderOutputDirectory" @bind-value="Options.OrderSheetOutputDirectory" />
            </div>

        }

        <hr class="my-10" />

        <div>
            <CheckBox @bind-IsChecked="@Options.GenerateInvoice">
                Generate Invoice PDF
            </CheckBox>
        </div>

        @if (Options.GenerateInvoice) {

            <div class="ml-3 mt-3">
                <label for="invoiceOutputDirectory">Output Directory</label>
                <input class="input-text w-full" id="invoiceOutputDirectory" @bind-value="Options.InvoicePDFOutputDirectory" />
            </div>

            <div class="ml-3 mt-3">
                <CheckBox @bind-IsChecked="@Options.SendInvoiceEmail">
                    Send Invoice Email
                </CheckBox>
            </div>

            <div class="ml-3 mt-3">
                <CheckBox @bind-IsChecked="@Options.PreviewInvoiceEmail">
                    Preview Before Sending
                </CheckBox>
            </div>

            @if (Options.SendInvoiceEmail) {

                <div class="border border-gray-300 rounded-md p-4 ml-3 mt-3">

                    <h3 class="text-sm mb-2">To:</h3>

                    @foreach (var email in Options.InvoiceEmailRecipients) {
                        <div class="mb-3 flex items-center gap-2">
                            <Button OnClick="() => RemoveEmailRecipients(email)" Color="ButtonColor.Secondary" Style="ButtonStyle.Text" Size="ButtonSize.Small">X</Button>
                            <input class="input-text flex-1" type="text" id="invoiceEmail" @bind-value="email.Address" />
                        </div>
                    }
                    <div class="ml-3">
                        <Button OnClick="AddEmailRecipients" Color="ButtonColor.Primary" Style="ButtonStyle.Outline" Size="ButtonSize.Small">+ To</Button>
                    </div>

                    <hr class="my-5"/>

                    <h3 class="text-sm mb-2">CC:</h3>

                    @foreach (var email in Options.InvoiceEmailCopyRecipients) {
                        <div class="mb-3 flex items-center gap-2">
                            <Button OnClick="() => RemoveEmailCopyRecipients(email)" Color="ButtonColor.Secondary" Style="ButtonStyle.Text" Size="ButtonSize.Small">X</Button>
                            <input class="input-text flex-1" type="text" id="invoiceEmail" @bind-value="email.Address" />
                        </div>
                    }
                    <div class="ml-3">
                        <Button OnClick="AddEmailCopyRecipients" Color="ButtonColor.Primary" Style="ButtonStyle.Outline" Size="ButtonSize.Small">+ CC</Button>
                    </div>

                </div>

            }

        }

        <hr class="my-10" />

        <div>
            <CheckBox @bind-IsChecked="@Options.PostToGoogleSheets">
                Post to Google Sheets
            </CheckBox>
        </div>

        <hr class="my-10" />

        <div>
            <Button OnClickAsync="ProcessOrder" Color="ButtonColor.Primary" Style="ButtonStyle.Contained" Size="ButtonSize.Medium" Disabled="_isProcessing">
                @if (_isProcessing) {
                    <span>Loading...</span>
                } else {
                    <span>Process Order</span>
                }
            </Button>
        </div>

    }

</form>

@code {

    [Inject]
    public HafeleMDFDoorOrderProcessor Processor { get; set; } = default!;

    public ProcessOptions Options = new();

    private bool _isProcessing = false;

    public async Task ProcessOrder() {
        _isProcessing = true;
        await InvokeAsync(StateHasChanged);
        await Processor.ProcessOrderAsync(Options);
        _isProcessing = false;
        await InvokeAsync(StateHasChanged);
    }

    public void RemoveEmailRecipients(Email email) {
        Options.InvoiceEmailRecipients.Remove(email);
        StateHasChanged();
    }

    public void AddEmailRecipients() {
        Options.InvoiceEmailRecipients.Add(new Email(string.Empty));
        StateHasChanged();
    }

    public void RemoveEmailCopyRecipients(Email email) {
        Options.InvoiceEmailCopyRecipients.Remove(email);
        StateHasChanged();
    }

    public void AddEmailCopyRecipients() {
        Options.InvoiceEmailCopyRecipients.Add(new Email(string.Empty));
        StateHasChanged();
    }

    public void ChooseFile()
        => FilePicker.PickFile(new() {
            Title = "Select Hafele MDF door order file",
            Filter = new("Hafele MDF door order file", ".xlsx")
        }, (fileName) => {
            Options.SetDataFile(fileName);
            InvokeAsync(StateHasChanged);
        });

}
