
<button @onclick="async () => { OnClick(); await OnClickAsync(); }" class="@Classes()" disabled="@Disabled" type="@Type">@ChildContent</button>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Action OnClick { get; set; } = new Action(() => { });

    [Parameter]
    public Func<Task> OnClickAsync { get; set; } = new Func<Task>(() => Task.CompletedTask);

    [Parameter]
    public ButtonStyle Style { get; set; } = ButtonStyle.Contained;

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Primary;

    [Parameter]
    public ButtonRounded Rounded { get; set; } = ButtonRounded.All;

    [Parameter]
    public string Type { get; set; } = "button";

    private string Classes() {

        string baseClass = "font-semibold px-2 py-1.5";

        string roundedClass = Rounded switch {
            ButtonRounded.Left => "rounded-l",
            ButtonRounded.Right => "rounded-r",
            ButtonRounded.Top => "rounded-t",
            ButtonRounded.Bottom => "rounded-b",
            ButtonRounded.All => "rounded",
            ButtonRounded.None or _ => "rounded-none",
        };

        string styleClass = Color switch {
            ButtonColor.Primary => Style switch {
                ButtonStyle.Text => "text-blue-600 hover:bg-blue-50 active:bg-blue-200 focus-visible:bg-blue-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "outline outline-1 outline-blue-600 hover:outline-blue-700 text-blue-600 hover:bg-blue-50 active:bg-blue-200 focus-visible:bg-blue-100 disabled:text-gray-400 disabled:outline-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "text-white bg-blue-600 hover:bg-blue-500 active:bg-blue-300 focus-visible:bg-blue-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            ButtonColor.Secondary => Style switch {
                ButtonStyle.Text => "text-slate-600 hover:bg-slate-50 active:bg-slate-200 focus-visible:bg-slate-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "outline outline-1 outline-slate-600 hover:outline-slate-700 text-slate-600 hover:bg-slate-50 active:bg-slate-200 focus-visible:bg-slate-100 disabled:text-gray-400 disabled:outline-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "text-white bg-slate-600 hover:bg-slate-500 active:bg-slate-300 focus-visible:bg-slate-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            ButtonColor.Success => Style switch {
                ButtonStyle.Text => "text-green-600 hover:bg-green-50 active:bg-green-200 focus-visible:bg-green-100 disabled:text-gray-400 disabled:pointer-events-none",
                ButtonStyle.Outline => "outline outline-1 outline-green-600 hover:outline-green-700 text-green-600 hover:bg-green-50 active:bg-green-200 focus-visible:bg-green-100 disabled:text-gray-400 disabled:outline-gray-400 disabled:pointer-events-none",
                ButtonStyle.Contained => "text-white bg-green-600 hover:bg-green-500 active:bg-green-300 focus-visible:bg-green-400 shadow-md hover:shadow-lg hover:active:shadow-xl disabled:bg-gray-400 disabled:pointer-events-none",
                _ => ""
            },
            _ => ""
        };

        return $"{baseClass} {roundedClass} {styleClass} {Class}";

    }

    public enum ButtonStyle {
        Contained,
        Outline,
        Text
    }

    public enum ButtonColor {
        Primary,
        Secondary,
        Success,
    }

    public enum ButtonRounded {
        Left,
        Right,
        Top,
        Bottom,
        All,
        None
    }

}