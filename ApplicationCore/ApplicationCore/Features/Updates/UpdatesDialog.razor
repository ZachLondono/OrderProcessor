@using ApplicationCore.Features.Shared.Components
@inject UpdatesDialogViewModel DataContext

<div class="grid grid-cols-1 justify-items-center">
    <h2>Current Version <span>@DataContext.CurrentVersion</span></h2>
    @if (DataContext.UsePreviewChannel) {
        <div>
            <span class="px-2 py-1 font-semibold text-xs bg-cyan-500 text-white rounded-full shadow-sm">preview</span>
        </div>
    }

    @if (DataContext.Error is not null) {
        <div class="text-red-700">
            @DataContext.Error
        </div>
    }

    @if (DataContext.IsCheckingForUpdates) {

        <div>Checking for updates...</div>

    } else if (DataContext.IsUpdateDownloading) {
    
        <div>Dowloading update... (@DataContext.AvailableUpdate)</div>

    } else if (DataContext.IsUpdateReady) {

        <div>Update is ready to install. (@DataContext.AvailableUpdate)</div>
        <Button Style="Button.ButtonStyle.Contained" Color="Button.ButtonColor.Success" OnClick="DataContext.InstallUpdate">Install</Button>

    } else if (DataContext.AvailableUpdate is not null) {

        <div>Update available. (@DataContext.AvailableUpdate)</div>
        <Button Style="Button.ButtonStyle.Contained" Color="Button.ButtonColor.Success" OnClickAsync="DataContext.DownloadUpdate">Download</Button>

    } else {
    
        <div>No updates available</div>
        <Button Style="Button.ButtonStyle.Outline" Color="Button.ButtonColor.Secondary" OnClickAsync="DataContext.CheckForUpdates">Refresh</Button>

    }
</div>

@code {

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DataContext.OnPropertyChanged += StateHasChanged;
        await DataContext.CheckForUpdates();
    }

}
