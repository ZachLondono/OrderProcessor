@using ApplicationCore.Infrastructure;
@using ApplicationCore.Features.CNC.LabelDB.Contracts;
@inject IBus Bus

@if (_error is not null) {
    <h3>@_error.Title</h3>
    <p>@_error.Details</p>
} else@if (_availableJobs is null) {
    <span>Loading...</span>
} else {

    if (_availableJobs.Any()) {

        <table class="table table-hover">

            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Machine</th>
                    <th>Created</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < _availableJobs.Count(); i++) {
                    var selection = _availableJobs[i];
                    <tr class="cursor-pointer" @onclick="(() => selection.IsSelected = !selection.IsSelected)">
                        <td><input type="checkbox" @bind="selection.IsSelected" /></td>
                        <td>@selection.Job.Name</td>
                        <td>@selection.Job.MachineName</td>
                        <td>@FormatDate(selection.Job.Created)</td>
                    </tr>
                }
            </tbody>

        </table>

        <div class="mt-3 float-right">
            <button class="text-blue-600 font-semibold hover:bg-blue-50 p-2 rounded-sm" @onclick="async() => await BlazoredModal.CloseAsync(ModalResult.Cancel())">Close</button>
            <button class="font-semibold text-blue-600 hover:bg-blue-50 disabled:text-blue-300 disabled:hover:bg-transparent p-2 rounded-sm" disabled="@(!_availableJobs.Any(j => j.IsSelected))" @onclick="ReturnSelectedJobs">Release</button>
        </div>

    } else {

        <span>There are no available jobs in the given label file</span>
        <span>@LabelDatabaseFilePath</span>
    }

}

@code {

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public string LabelDatabaseFilePath { get; set; } = string.Empty;
    
    private IList<JobListItem>? _availableJobs = null;
    private Error? _error = null;

    protected override async Task OnParametersSetAsync() {

        var response = await Bus.Send(new ListAvailableJobsInLabelDB.Command(LabelDatabaseFilePath));

        response.Match(
            jobs => {
                _availableJobs = jobs.Select(j => new JobListItem() { Job = j, IsSelected = true }).ToList();
            },
            error => {
                _error = error;
            }
        );

        StateHasChanged();

    }

    public static string FormatDate(DateTime date) {

        // TODO: Convert to extension method

        return date.ToString();

    }

    public async Task ReturnSelectedJobs() {
        IEnumerable<AvailableJob> selected;
        if (_availableJobs is null) selected = Enumerable.Empty<AvailableJob>();
        else selected = _availableJobs.Where(j => j.IsSelected).Select(j => j.Job);

        await BlazoredModal.CloseAsync(ModalResult.Ok(selected));

    }

    class JobListItem {

        public required AvailableJob Job { get; init; }

        public required bool IsSelected { get; set; }

    }

}
