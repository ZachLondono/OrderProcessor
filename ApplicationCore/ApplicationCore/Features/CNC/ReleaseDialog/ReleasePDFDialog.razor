@using ApplicationCore.Shared.Components
@using System.Diagnostics;
@using ApplicationCore.Shared.Services;
@inject ReleasePDFDialogViewModel DataContext
@inject IFilePicker FilePicker 

@if (DataContext.Error is not null) {
    <span class="text-red-600">@DataContext.Error</span>    
}

@if (DataContext.IsGeneratingPDF) {

    <p>Generating PDF...</p>

} else if (DataContext.GeneratedFiles.Any()) {

    <div class="ml-5">
        <h3>PDFs Generated:</h3>
        <ul class="list-disc">
        @foreach (var fileName in DataContext.GeneratedFiles) {
            <li>
                <a onclick="@(() => OpenFile(fileName))" class="underline cursor-pointer">@fileName</a> 
            </li>
        }
        </ul>
    </div>

} else {

    <EditForm Model="@DataContext.Model">

        <div>
            <Button Color="Button.ButtonColor.Secondary" OnClick="ChooseReportFile" Class="mr-5">Choose Report</Button>
            @if (string.IsNullOrEmpty(DataContext.Model.ReportFilePath)) {
                <span>None selected</span>
            } else {
                <span>@DataContext.Model.ReportFilePath</span>
            }
        </div>

        <div class="mt-3">
            <label class="font-semibold">Customer</label>
            <InputText @bind-Value="DataContext.Model.CustomerName" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Vendor</label>
            <InputText @bind-Value="DataContext.Model.VendorName" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Order Date</label>
            <InputDate @bind-Value="DataContext.Model.OrderDate" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Output directory</label>
            <InputText @bind-Value="DataContext.Model.OutputDirectory" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">File name</label>
            <InputText @bind-Value="DataContext.Model.FileName" class="input-text w-full" spellcheck="false" />
        </div>

        <div class="mt-3">
            <CheckBox @bind-IsChecked="DataContext.Model.SendEmail">
                <span class="font-semibold">Send Email</span>
            </CheckBox>
            @if (DataContext.Model.SendEmail) {
                <InputText @bind-Value="DataContext.Model.EmailRecipients" class="input-text w-full" />
            }
        </div>
    
        <Button OnClickAsync="DataContext.GeneratePDF" Color="Button.ButtonColor.Primary" class="mt-3">Generate PDF</Button>
    
    </EditForm>

}

@code {

    [Parameter]
    public string? ReportFilePath { get; init; } = null;

    [Parameter]
    public string? CustomerName { get; init; } = null;

    [Parameter]
    public string? VendorName { get; init; } = null;

    [Parameter]
    public string? OutputDirectory { get; init; } = null;

    [Parameter]
    public string? FileName { get; init; } = null;

    [Parameter]
    public string? EmailRecipients { get; init; } = null;

    protected override void OnInitialized() {
        base.OnInitialized();
        DataContext.OnPropertyChanged += StateHasChanged;

        if (ReportFilePath is not null && File.Exists(ReportFilePath)) {
            DataContext.Model.ReportFilePath = ReportFilePath ?? string.Empty;
        }
        DataContext.Model.CustomerName = CustomerName ?? string.Empty;
        DataContext.Model.VendorName = VendorName ?? string.Empty;
        DataContext.Model.FileName = FileName ?? string.Empty;
        DataContext.Model.OutputDirectory = OutputDirectory ?? DataContext.Model.OutputDirectory;
        if (!string.IsNullOrWhiteSpace(EmailRecipients)) {
            DataContext.Model.EmailRecipients = EmailRecipients;
            DataContext.Model.SendEmail = true;
        }

    }

    private void ChooseReportFile()
        => FilePicker.PickFile(new() {
            Title = "Select CADCode WS Report File",
            InitialDirectory = @"Y:\CADCode\Reports", 
            Filter = new("CADCode WS Report", "xml"),
        }, (fileName) => {
            DataContext.Model.ReportFilePath = fileName;
            InvokeAsync(StateHasChanged);
        });

    public void OpenFile(string filePath) {

        try {

            var psi = new ProcessStartInfo {
                FileName = filePath,
                UseShellExecute = true
            };
            Process.Start(psi);

        } catch (Exception ex) {
            Debug.WriteLine(ex);
        }

    }

}
