@using ApplicationCore.Features.Shared.Components
@using System.Diagnostics;
@using ApplicationCore.Features.Shared.Services;
@inject ReleasePDFDialogViewModel DataContext
@inject IFilePicker FilePicker 

@if (DataContext.Error is not null) {
    <span class="text-red-600">@DataContext.Error</span>    
}

@if (DataContext.IsGeneratingPDF) {

    <p>Generating PDF...</p>

} else if (DataContext.GeneratedFile is not null) {

    <p>PDF Generated</p>
    <a onclick="@(() => OpenFile(DataContext.GeneratedFile))" class="underline cursor-pointer">@DataContext.GeneratedFile</a> 

} else {

    <EditForm Model="@DataContext.Model">

        <div>
            <Button Color="Button.ButtonColor.Secondary" OnClick="ChooseReportFile">Choose Report</Button>
            @if (string.IsNullOrEmpty(DataContext.Model.ReportFilePath)) {
                <span>None selected</span>
            } else {
                <span>@DataContext.Model.ReportFilePath</span>
            }
        </div>

        <div class="mt-3">
            <label class="font-semibold">Customer</label>
            <InputText @bind-Value="DataContext.Model.CustomerName" class="border w-full" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Vendor</label>
            <InputText @bind-Value="DataContext.Model.VendorName" class="border w-full" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Order Date</label>
            <InputDate @bind-Value="DataContext.Model.OrderDate" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">Output directory</label>
            <InputText @bind-Value="DataContext.Model.OutputDirectory" class="border w-full" />
        </div>

        <div class="mt-3">
            <label class="font-semibold">File name</label>
            <InputText @bind-Value="DataContext.Model.FileName" class="border w-full" />
        </div>
    
        <Button OnClickAsync="DataContext.GeneratePDF" Color="Button.ButtonColor.Primary" class="mt-3">Generate PDF</Button>
    
    </EditForm>

}

@code {

    protected override void OnInitialized() {
        base.OnInitialized();
        DataContext.OnPropertyChanged += StateHasChanged;
    }

    private void ChooseReportFile()
        => FilePicker.PickFile("Select CADCode WS Report File", @"Y:\CADCode\Reports", new("CADCode WS Report", "xml"), (fileName) => {
            DataContext.Model.ReportFilePath = fileName;
            InvokeAsync(StateHasChanged);
        });

    public void OpenFile(string filePath) {

        try {

            var psi = new ProcessStartInfo {
                FileName = filePath,
                UseShellExecute = true
            };
            Process.Start(psi);

        } catch (Exception ex) {
            Debug.WriteLine(ex);
        }

    }

}
