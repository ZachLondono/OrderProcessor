@using ApplicationCore.Features.CustomizationScripts.ViewModels;
@using ApplicationCore.Shared.Components
@using static ApplicationCore.Shared.Components.Button;
@inject CustomizationScriptManagerViewModel DataContext
@inject IModalService ModalService

<div>

    @if (DataContext.Error is not null) {
        <p class="text-red-600">
            @DataContext.Error
        </p>
    }

    @if (DataContext.Scripts.Any()) {
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>File</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var script in DataContext.Scripts) {
                    <tr>
                        <td>@script.Name</td>
                        <td>@script.FilePath</td>
                        <td>
                            <Button OnClickAsync="() => DataContext.ShowEditScriptModal(ModalService, script.Id)">Edit</Button>
                            <Button Color="ButtonColor.Danger" OnClickAsync="() => DataContext.DeleteScript(script.Id)">Delete</Button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    } else {
        <p>No Scripts Save to Order</p>
    }

    <Button OnClickAsync="() => DataContext.ShowAddScriptModal(ModalService, OrderId)">+Add</Button>

</div>

@code {

    [CascadingParameter]
    public BlazoredModalInstance? ModalInstance { get; set; }

    [Parameter]
    public Guid OrderId { get; set; }

    public Task CloseAsync() => ModalInstance?.CloseAsync() ?? Task.CompletedTask;

    protected override void OnInitialized() {
        DataContext.OnPropertyChanged += StateHasChanged;
    }

    protected async override Task OnParametersSetAsync() {
        await DataContext.Loaded(OrderId);
    }

}
