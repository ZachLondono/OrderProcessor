@using ApplicationCore.Features.CNC.LabelDB;
@using ApplicationCore.Features.CNC.LabelDB.Contracts;
@using ApplicationCore.Features.CNC.ReleasePDF;
@using ApplicationCore.Features.Companies.Domain.ValueObjects
@using ApplicationCore.Features.Orders.Details;
@using ApplicationCore.Features.Orders.Shared.Domain
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Features.Orders.Release
@using ApplicationCore.Features.Orders.Shared.State;
@using ApplicationCore.Features.ProductPlanner;
@using ApplicationCore.Features.ProductPlanner.Contracts;
@using ApplicationCore.Features.WorkOrders;
@using ApplicationCore.Infrastructure
@using System.Diagnostics
@using ApplicationCore.Features.Shared.Components
@using static ApplicationCore.Features.Shared.Components.DropDown;
@using static ApplicationCore.Features.Shared.Components.Button;
@using ApplicationCore.Features.Orders.Shared.Domain.Products;
@using ApplicationCore.Features.Orders.Shared;
@using ApplicationCore.Features.Orders.Shared.Domain.Enums;
@using ApplicationCore.Pages.OrderDetails;
@using static ApplicationCore.Features.Orders.Details.MDFDoorProductTable;
@using static ApplicationCore.Features.Orders.Details.DovetailDrawerBoxProductTable;
@using static ApplicationCore.Features.Orders.Details.ClosetPartProductTable;
@using static ApplicationCore.Features.Orders.Details.CabinetProductTable;
@inherits UIListenerComponent<WorkOrdersUpdatNotification>
@inject IBus Bus
@inject IUIBus UIBus
@inject OrderState OrderState
@inject Manufacturing.IsProductComplete IsProductComplete
@inject IFilePicker FilePicker
@inject NavigationService NavigationService

@if (OrderState.Order is null) {
    <span>No order selected</span>
} else {
    
    <section id="summary">
        <div class="mb-4">
            <label id="number" class="text-lg w-24 inline-block dark:text-gray-400">Number</label>
            <span class="text-xl w-64 border-b-2 border-gray-400 dark:text-white">@OrderState.Order.Number</span>
            @if (OrderState.Order.Rush) {
                <span class="p-2 text-white font-bold bg-red-500">RUSH</span>
            }
        </div>
        <div>
            <label id="name" class="text-lg w-24 inline-block dark:text-gray-400">Name</label>
            <span class="text-xl w-64 border-b-2 border-gray-400 dark:text-white">@OrderState.Order.Name</span>
        </div>
        <div>
            <label id="orderdate" class="text-md w-24 inline-block dark:text-gray-400">Order Date</label>
            <span class="text-lg dark:text-white">@OrderState.Order.OrderDate.ToShortDateString()</span>
        </div>
    </section>

    <section class="mt-10" id="actions">
        <div class="mb-4">
            <Button Type="button" OnClickAsync="ReleaseOrder" Disabled="_isReleasing" Class="float-left flex justify-center items-center h-10 w-36" Rounded="ButtonRounded.Left" Color="ButtonColor.Secondary">
                @if (_isReleasing) {
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                }
                Release
            </Button><!--
         --><DropDown Class="flex justify-center items-center w-12 h-10" Rounded="ButtonRounded.Right" Color="ButtonColor.Secondary" Position="DropdownPosition.BottomRight" OnOpenAsync="LoadReleaseProfile">
                <ButtonContent>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z" />
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                </ButtonContent>
                <DropDownContent>
                    <ReleaseProfileDropDown Profile="_customReleaseProfile" />
                </DropDownContent>
            </DropDown>
        </div>

        <div class="mb-4">
            <Button Type="button" OnClickAsync="ExportForPSI" Color="ButtonColor.Secondary" Style="ButtonStyle.Outline">
                Export for PSI
            </Button>
        </div>
        <div class="mb-4">
            <Button Type="button" OnClickAsync="GenerateCNCReleasePDF" Color="ButtonColor.Secondary" Style="ButtonStyle.Outline">
                Generate CNC PDF
            </Button>
        </div>
    </section>

    <section class="mt-10" id="companyInfo">
        <div>
            <label id="customer" class="text-md w-24 inline-block dark:text-gray-400 h-5 align-middle">Customer</label>
            <span class="text-lg dark:text-white h-5 align-middle">@OrderState.Order.Customer.Name</span>
        </div>
        <div>
            @if(_vendorName is not null) {
                <label id="vendor" class="text-md w-24 inline-block dark:text-gray-400 h-5 align-middle">Vendor</label>
                <span class="text-lg hover:underline cursor-pointer dark:text-white h-5 align-middle" @onclick="() => OpenCompanyPage(OrderState.Order.VendorId)">@_vendorName</span>
            } else {
                <span>No vendor info</span>
            }
        </div>
        <div>
            <label id="comment" class="text-md w-24 inline-block dark:text-gray-400">Comment</label>
            <span class="text-lg dark:text-white">@OrderState.Order.CustomerComment</span>
        </div>
    </section>

    <section class="mt-10" id="shipping">

        <div>
            <label id="shippingmethod" class="text-md w-24 inline-block dark:text-gray-400">Method</label>
            <span class="text-lg dark:text-white">@OrderState.Order.Shipping.Method</span>
        </div>

        <div>
            <label id="shippingcontact" class="text-md w-24 inline-block dark:text-gray-400">Contact</label>
            <span class="text-lg dark:text-white">@OrderState.Order.Shipping.Contact</span>
        </div>

        <div>
            <label id="shippingphone" class="text-md w-24 inline-block dark:text-gray-400">Phone</label>
            <span class="text-lg dark:text-white">@OrderState.Order.Shipping.PhoneNumber</span>
        </div>


        <div>
            <h3 class="text-md w-24 inline-block dark:text-gray-400">Address</h3>
            <div class="ml-5">
                <div>
                    <label id="shippingline1" class="text-sm w-24 inline-block dark:text-gray-400">Line 1</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.Line1</span>
                </div>

                <div>
                    <label id="shippingline2" class="text-sm w-24 inline-block dark:text-gray-400">Line 2</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.Line2</span>
                </div>

                <div>
                    <label id="shippingline3" class="text-sm w-24 inline-block dark:text-gray-400">Line 3</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.Line3</span>
                </div>

                <div>
                    <label id="shippingcity" class="text-sm w-24 inline-block dark:text-gray-400">City</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.City</span>
                </div>

                <div>
                    <label id="shippingstate" class="text-sm w-24 inline-block dark:text-gray-400">State</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.State</span>
                </div>

                <div>
                    <label id="shippingzip" class="text-sm w-24 inline-block dark:text-gray-400">Zip</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.Zip</span>
                </div>

                <div>
                    <label id="shippingcountry" class="text-sm w-24 inline-block dark:text-gray-400">Country</label>
                    <span class="text-md dark:text-white">@OrderState.Order.Shipping.Address.Country</span>
                </div>
            </div>
        </div>

    </section>

    <section class="mt-10" id="prices">
        <div>
            <label id="subtotal" class="text-md w-24 inline-block dark:text-gray-400">Sub Total</label>
            <span class="text-lg dark:text-white">$@(OrderState.Order.SubTotal.ToString("0.00"))</span>
        </div>
        @if(OrderState.Order.PriceAdjustment != 0M) {
            <div>
                <label id="subtotal" class="text-md w-24 inline-block dark:text-gray-400">Price Adj.</label>
                <span class="text-lg dark:text-white">$@(OrderState.Order.PriceAdjustment.ToString("0.00"))</span>
            </div>
            <div>
                <label id="subtotal" class="text-md w-24 inline-block dark:text-gray-400">Net Total</label>
                <span class="text-lg dark:text-white">$@(OrderState.Order.AdjustedSubTotal.ToString("0.00"))</span>
            </div>
        }
        <div>
            <label id="tax" class="text-md w-24 inline-block dark:text-gray-400">Tax</label>
            <span class="text-lg dark:text-white">$@(OrderState.Order.Tax.ToString("0.00"))</span>
        </div>
        <div>
            <label id="shipping" class="text-md w-24 inline-block dark:text-gray-400">Shipping</label>
            <span class="text-lg dark:text-white">$@(OrderState.Order.Shipping.Price.ToString("0.00"))</span>
        </div>
        <div>
            <label id="totalprice" class="text-md w-24 inline-block dark:text-gray-400">Total Price</label>
            <span class="text-lg dark:text-white">$@(OrderState.Order.Total.ToString("0.00"))</span>
        </div>
    </section>

    @if (OrderState.Order.Info.Count() != 0) {
        <section class="mt-10" id="dynamicValues">
            <table>
                <thead class="border-b border-slate-300">
                    <tr class="dark:bg-slate-700 dark:text-gray-500">
                        <th class="px-3">Name</th>
                        <th class="px-3">Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderState.Order.Info) {
                        <tr class="border-b dark:border-slate-500">
                            <td class="px-3 font-medium dark:text-gray-400">@item.Key</td>
                            <td class="px-3 dark:text-white">@item.Value</td>
		                </tr>
                    }
                </tbody>
            </table>
	    </section>
    }

    @if(OrderState.Order.AdditionalItems.Count() != 0) {
        <section class="mt-10" id="additionalItems">
		    <table class="table-auto">
			    <thead class="border-b border-slate-300">
                    <tr class="dark:bg-slate-700 dark:text-gray-500">
					    <th class="px-3">Description</th>
					    <th class="px-3">Price</th>
				    </tr>
			    </thead>
			    <tbody>
                    @foreach (var item in OrderState.Order.AdditionalItems) {
                        <tr>
                            <td class="px-3 border-b font-medium dark:border-slate-500 dark:text-gray-400">@item.Description</td>
                            <td class="px-3 border-b dark:border-slate-500 dark:text-white">$@item.Price.ToString("0.00")</td>
				        </tr>
                    }
			    </tbody>
		    </table>
	    </section>
    }

    <section class="mt-10" id="products">
        <header>
            <h3 class="dark:text-gray-400">Products (@OrderState.Order.Products.Sum(b => b.Qty))</h3>
        </header>
        <div class="my-2">
            <button disabled="@_useInches" @onclick="ToggleUnits" class="btn-secondary dark:disabled:bg-sky-500 disabled:bg-sky-500 px-3.5 py-1 rounded-r-none rounded-l-md w-14 transition ease-in-out duration-300">in</button><!--
         --><button disabled="@(!_useInches)" @onclick="ToggleUnits" class="btn-secondary dark:disabled:bg-sky-500 disabled:bg-sky-500 px-3.5 py-1 rounded-l-none rounded-r-md w-14 transition ease-in-out duration-300">mm</button>
		</div>
        @if (OrderState.Order.Products.Count() == 0) {
            <span>No products in order</span>
        } else {

            if (DrawerBoxes.Any()) {
                <section class="mt-5">
                    <h3>Drawer Boxes</h3>
                    <DovetailDrawerBoxProductTable UseInches="@_useInches" DrawerBoxes="@DrawerBoxes" />
                </section>
            }

            if (Cabinets.Any()) {
                <section class="mt-5">
                    <h3>Cabinets</h3>
                    <CabinetProductTable UseInches="@_useInches" Cabinets="@Cabinets" />
                </section>
            }

            if (ClosetParts.Any()) {
                <section class="mt-5">
                    <h3>Closet Parts</h3>
                    <ClosetPartProductTable UseInches="@_useInches" ClosetParts="@ClosetParts" />
                </section>
            }

            if (Doors.Any()) {
                <section class="mt-5">
                    <h3>MDF Doors</h3>
                    <MDFDoorProductTable UseInches="@_useInches" MDFDoors="@Doors" />
                </section>
      
            }

        }
    </section>
}

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Parameter]
    public IOrderDetailsPageViewModel? ViewModel { get; set; }

    public List<CabinetRowModel> Cabinets { get; set; } = new();
    public List<ClosetPartRowModel> ClosetParts { get; set; } = new();
    public List<DovetailDrawerBoxRowModel> DrawerBoxes { get; set; } = new();
    public List<MDFDoorRowModel> Doors { get; set; } = new();

    private string? _vendorName = null;
    private ReleaseProfile? _customReleaseProfile = null;

    private bool _useInches = false;

    private bool _isReleasing = false;

    protected override async Task OnInitializedAsync() {

        if (OrderState.Order is null) return;

        if (ViewModel is not null) {
            _vendorName = await ViewModel.GetCompanyName(OrderState.Order.VendorId);
        }

        Cabinets = OrderState.Order
                            .Products
                            .OfType<Cabinet>()
                            .Select(cab => new CabinetRowModel() {
                                Cabinet = cab,
                                IsComplete = false
                            })
                            .ToList();

        ClosetParts = OrderState.Order
                                .Products
                                .OfType<ClosetPart>()
                                .Select(cp => new ClosetPartRowModel() {
                                    ClosetPart = cp,
                                    IsComplete = false
                                })
                                .ToList();

        DrawerBoxes = OrderState.Order
                                .Products
                                .OfType<DovetailDrawerBoxProduct>()
                                .Select(db => new DovetailDrawerBoxRowModel() {
                                    DrawerBox = db,
                                    IsComplete = false
                                })
                                .ToList();

        Doors = OrderState.Order
                        .Products
                        .OfType<MDFDoorProduct>()
                        .Select(door => new MDFDoorRowModel() {
                            Door = door,
                            IsComplete = false
                        })
                        .ToList();

        await UpdateProductStatuses();

    }

    private async Task UpdateProductStatuses() {

        if (OrderState.Order is null) {
            return;
        }

        foreach (var cabinet in Cabinets) {

            cabinet.IsComplete = await IsProductComplete(OrderState.Order.Id, cabinet.Cabinet.Id);

        }

        foreach (var part in ClosetParts) {

            part.IsComplete = await IsProductComplete(OrderState.Order.Id, part.ClosetPart.Id);

        }

        foreach (var db in DrawerBoxes) {

            db.IsComplete = await IsProductComplete(OrderState.Order.Id, db.DrawerBox.Id);

        }

        foreach (var door in Doors) {

            door.IsComplete = await IsProductComplete(OrderState.Order.Id, door.Door.Id);

        }

        StateHasChanged();

    }

    private async Task LoadReleaseProfile() {

        if (OrderState.Order is null || _customReleaseProfile is not null) return;

        if (ViewModel is not null) {
            _customReleaseProfile = await ViewModel.GetVendorReleaseProfile(OrderState.Order.VendorId);
        }

        if (_customReleaseProfile is null) {
            _ = await Modal.OpenInformationDialog("Could not Load Release Settings", "", InformationDialog.MessageType.Warning);
        }

    }

    public async Task OpenCompanyPage(Guid companyId) {
        await NavigationService.NavigateToCompanyPage(companyId);
    }

    private async Task ReleaseOrder() {

        if (_isReleasing == true) {
            return;
        }

        _isReleasing = true;

        var parameters = new ModalParameters();
        if (_customReleaseProfile is not null)
            parameters.Add("ReleaseProfile", _customReleaseProfile);

        var options =  new ModalOptions() {
            HideHeader = true,
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            Size = ModalSize.Large
        };

        var dialog = Modal.Show<ReleaseProgressDialog>("Order Release Progress", parameters, options);

        _ = await dialog.Result;

        _isReleasing = false;

    }

    private async Task ExportForPSI() {

        if (OrderState.Order is null || ViewModel is null) return;

        string errors = await ViewModel.ExportOrderForPSI(OrderState.Order);

        if (errors != string.Empty) {
            await Modal.OpenInformationDialog("Manual Overrides Needed:", errors, InformationDialog.MessageType.Information);
        } else {
            await Modal.OpenInformationDialog("Completed", "EXT export completed", InformationDialog.MessageType.Information);
        }

    }

    private async Task GenerateCNCReleasePDF() {

        if (OrderState.Order is null || ViewModel is null) return;

        var waitingDialog = ShowLoadingDialog("Waiting", "Select Label File.");

        string selectedPath = "";
        bool wasPicked = await FilePicker.PickFileAsync("Select label database", "Y:\\CADCode\\Label Data", new("CADCode Label File", ".mdb"), (path) => {
            selectedPath = path;
        });

        waitingDialog.Close();

        if (!wasPicked || selectedPath == "") {
            return;
        }

        var modal = Modal.Show<ListAvailableJobsDialog>("Select Job", new ModalParameters() { { "LabelDatabaseFilePath", selectedPath } });
        var modalResult = await modal.Result;
        if (modalResult.Cancelled) {
            return;
        }

        if (modalResult.Data is not IEnumerable<AvailableJob> selectedJobs) {
            _ = await Modal.OpenInformationDialog("Error", "Unexpected Data Returned", InformationDialog.MessageType.Warning);
            return;
        }

        var loadingDialog = ShowLoadingDialog("Loading", "Generating files");
        var result = await Task.Run(() => ViewModel.GenerateCNCReleasePDF(OrderState.Order, selectedPath, selectedJobs)).ConfigureAwait(true);
        loadingDialog.Close();

        if (result is null) {

            await Modal.OpenInformationDialog("Errror", "No pdfs where generated", InformationDialog.MessageType.Error);

        } else {

            await Modal.OpenInformationDialog("Completed", "CNC PDF Generated", InformationDialog.MessageType.Information);

            if (result.WorkOrderId is not null) {
                UIBus.Publish(new WorkOrdersUpdatNotification());
            }

        }

    }

    private IModalReference ShowLoadingDialog(string title, string message) {
        
        var options = new ModalOptions() {
            HideHeader = true,
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        
        return Modal.Show<InformationDialog>("", options: options, parameters: new ModalParameters {
            { "Type", InformationDialog.MessageType.Information },
            { "Title", title},
            { "Details", message }
        });

    }

    private void ToggleUnits() {
        _useInches = !_useInches;
    }

    public override void Handle(WorkOrdersUpdatNotification notification) {  

        InvokeAsync(UpdateProductStatuses);

    }

}
