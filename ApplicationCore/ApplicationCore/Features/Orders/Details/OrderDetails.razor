@using ApplicationCore.Features.Companies.Contracts;
@using ApplicationCore.Features.Orders.Details;
@using ApplicationCore.Features.Orders.Details.ProductTables
@using ApplicationCore.Features.Orders.Details.WorkingDirectory
@using ApplicationCore.Features.Orders.OrderExport;
@using ApplicationCore.Features.Orders.Shared.Domain
@using ApplicationCore.Features.Orders.Shared.Domain.Products.Closets;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Features.Orders.OrderRelease
@using ApplicationCore.Features.Orders.Shared.State;
@using ApplicationCore.Shared.Services;
@using ApplicationCore.Infrastructure
@using System.Diagnostics
@using ApplicationCore.Shared.Components
@using ApplicationCore.Features.Orders.Shared.Domain.Products;
@using ApplicationCore.Features.Orders.Shared;
@using ApplicationCore.Features.Orders.Shared.Domain.Enums;
@using ApplicationCore.Infrastructure.Bus;
@using ApplicationCore.Pages.OrderDetails;
@using ApplicationCore.Infrastructure.UI
@using static ApplicationCore.Shared.Components.DropDown;
@using static ApplicationCore.Shared.Components.Button;
@using static ApplicationCore.Features.Orders.Details.ProductTables.MDFDoorProductTable;
@using static ApplicationCore.Features.Orders.Details.ProductTables.DovetailDrawerBoxProductTable;
@using static ApplicationCore.Features.Orders.Details.ProductTables.ClosetPartProductTable;
@using static ApplicationCore.Features.Orders.Details.ProductTables.CabinetProductTable;
@using ApplicationCore.Features.Companies.Contracts.ValueObjects;
@using ApplicationCore.Features.Orders.Shared.Domain.Products.Cabinets;
@inject IBus Bus
@inject OrderState OrderState
@inject IFilePicker FilePicker
@inject NavigationService NavigationService
@inject CompanyDirectory.GetVendorByIdAsync GetVendorByIdAsync 
@inject CompanyDirectory.GetCustomerByIdAsync GetCustomerByIdAsync 

@if (OrderState.Order is null) {
    <span>Order was not found or could not be loaded</span>
} else {
    
    <section class="grid grid-cols-2 mb-10">

        <div id="header" class="pl-10">
            <div>
                <label id="number" class="text-lg font-bold w-24 inline-block">Number</label>
                <span class="text-xl font-semibold">@OrderState.Order.Number</span>
                @if (OrderState.Order.Rush) {
                    <span class="p-2 text-white font-bold bg-red-500">RUSH</span>
                }
            </div>
            <div>
                <label id="name" class="text-lg font-bold w-24 inline-block">Name</label>
                <span class="text-xl font-semibold">@OrderState.Order.Name</span>
            </div>
            <div>
                <label id="orderdate" class="w-24 inline-block font-medium">Order Date</label>
                <span>@OrderState.Order.OrderDate.ToShortDateString()</span>
            </div>
            <div>
                <label id="duedate" class="w-24 inline-block font-medium">Due Date</label>
                @if (_dueDate is DateTime dueDate) {
                    <!--<InputDate @oninput="OnDueDateChanged" TValue="DateTime" ValueExpression="() => dueDate" />-->
                    <input type="date" value="@dueDate.ToString("yyyy-MM-dd")" @oninput="OnDueDateChanged" />
                    <Button Size="ButtonSize.XSmall" Style="ButtonStyle.Outline" Color="ButtonColor.Danger" OnClickAsync="RemoveDueDate">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-2 h-2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </Button>
                } else {
                    <Button Size="ButtonSize.Small" Style="ButtonStyle.Link" OnClickAsync="AddDueDate">+ Add Due Date</Button>
                }
            </div>
            <div>
                @if (_customerName is not null) {
                    <label id="customer" class="w-24 inline-block font-medium">Customer</label>
                    <span class="hover:underline cursor-pointer h-5 align-middle" @onclick="() => OpenCustomerPage(OrderState.Order.CustomerId)">@_customerName</span>
                } else {
                    <span>No customer info</span>
                }
            </div>
            <div>
                @if(_vendorName is not null) {
                    <label id="vendor" class="w-24 inline-block font-medium">Vendor</label>
                    <span class="hover:underline cursor-pointer h-5 align-middle" @onclick="() => OpenVendorPage(OrderState.Order.VendorId)">@_vendorName</span>
                } else {
                    <span>No vendor info</span>
                }
            </div>
            <div>
                <label id="comment" class="w-24 inline-block font-medium">Comment</label>
                <span>@OrderState.Order.CustomerComment</span>
            </div>

            @if (OrderState.Order.Info.Count != 0) {
                <div class="mt-5">
                    <span class="text-xs ml-1 text-gray-400">Other info</span>
                    <table>
                        <tbody>
                            @if (!OrderState.Order.Info.Any()) {
                                <tr><td colspan="2">No other order info</td></tr>
                            }
                            @foreach (var item in OrderState.Order.Info) {
                                <tr>
                                    <td class="pr-3 font-medium">@item.Key</td>
                                    <td>@item.Value</td>
                                </tr>
                            }
                            <!--
                            <tr>
                                <td class="text-center cursor-pointer font-semibold hover:bg-blue-100 hover:text-blue-700 rounded-md">+ Add</td>
                            </tr>
                            -->
                        </tbody>
                    </table>
                </div>
            }
        </div>
    
        @if (ActionPanel is not null){
            <div id="actions">
                @ActionPanel
            </div>
        }
    
    </section>

    <section class="mt-10" id="order_note">
        <div class="mb-5">
            <label for="note" class="mr-5">Note</label>
            <Button OnClickAsync="@SaveNoteAsync" Size="ButtonSize.XSmall" Style="ButtonStyle.Text" Disabled="!OrderState.IsNoteDirty">Save</Button>
            <textarea id="note" placeholder="Order Note..." class="w-full" @oninput="OnNoteChanged">@_note</textarea>
        </div>

        <div>
            <WorkingDirectoryWidget WorkingDirectory="@OrderState.Order.WorkingDirectory" OnWorkingDirectoryChanged="WorkingDirectoryChanged" />
        </div>
    </section>

    <section class="mt-10" id="shipping">

        <div>
            <label id="shippingmethod" class="text-md w-24 inline-block">Method</label>
            <span class="text-lg">@OrderState.Order.Shipping.Method</span>
        </div>

        <div>
            <label id="shippingcontact" class="text-md w-24 inline-block">Contact</label>
            <span class="text-lg">@OrderState.Order.Shipping.Contact</span>
        </div>

        <div>
            <label id="shippingphone" class="text-md w-24 inline-block">Phone</label>
            <span class="text-lg">@OrderState.Order.Shipping.PhoneNumber</span>
        </div>


        <div>
            <h3 class="text-md w-24 inline-block">Address</h3>
            <div class="ml-5">
                <div>
                    <label id="shippingline1" class="text-sm w-24 inline-block">Line 1</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.Line1</span>
                </div>

                <div>
                    <label id="shippingline2" class="text-sm w-24 inline-block">Line 2</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.Line2</span>
                </div>

                <div>
                    <label id="shippingline3" class="text-sm w-24 inline-block">Line 3</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.Line3</span>
                </div>

                <div>
                    <label id="shippingcity" class="text-sm w-24 inline-block">City</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.City</span>
                </div>

                <div>
                    <label id="shippingstate" class="text-sm w-24 inline-block">State</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.State</span>
                </div>

                <div>
                    <label id="shippingzip" class="text-sm w-24 inline-block">Zip</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.Zip</span>
                </div>

                <div>
                    <label id="shippingcountry" class="text-sm w-24 inline-block">Country</label>
                    <span class="text-md">@OrderState.Order.Shipping.Address.Country</span>
                </div>
            </div>
        </div>

    </section>

    <section class="mt-10" id="prices">
        <div>
            <label id="subtotal" class="text-md w-24 inline-block">Sub Total</label>
            <span class="text-lg">$@(OrderState.Order.SubTotal.ToString("0.00"))</span>
        </div>
        @if(OrderState.Order.PriceAdjustment != 0M) {
            <div>
                <label id="subtotal" class="text-md w-24 inline-block">Price Adj.</label>
                <span class="text-lg">$@(OrderState.Order.PriceAdjustment.ToString("0.00"))</span>
            </div>
            <div>
                <label id="subtotal" class="text-md w-24 inline-block">Net Total</label>
                <span class="text-lg">$@(OrderState.Order.AdjustedSubTotal.ToString("0.00"))</span>
            </div>
        }
        <div>
            <label id="tax" class="text-md w-24 inline-block">Tax</label>
            <span class="text-lg">$@(OrderState.Order.Tax.ToString("0.00"))</span>
        </div>
        <div>
            <label id="shipping" class="text-md w-24 inline-block">Shipping</label>
            <span class="text-lg">$@(OrderState.Order.Shipping.Price.ToString("0.00"))</span>
        </div>
        <div>
            <label id="totalprice" class="text-md w-24 inline-block">Total Price</label>
            <span class="text-lg">$@(OrderState.Order.Total.ToString("0.00"))</span>
        </div>
    </section>

    <section class="mt-16" id="products">

        <header class="mb-5">
            <h2 class="font-bold text-xl">@OrderState.Order.Products.Sum(b => b.Qty) Products</h2>
        </header>

        <!--
        <div class="flex space-x-3 mb-5">
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-900 text-white">All</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">Closet Parts</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">Cabinets</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">Cabinet Parts</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">Doweled DBs</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">Doweled DBs</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">Zargen DBs</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">MDF Doors</button>
            <button class="px-3 py-2 text-sm whitespace-nowrap rounded-md bg-gray-100 hover:bg-gray-200">5-Piece Doors</button>
        </div>
        -->

        <div class="mb-5">
            <button disabled="@_useInches" @onclick="ToggleUnits" class="bg-gray-100 disabled:bg-black disabled:text-white px-3.5 py-1 rounded-r-none rounded-l-md w-14 transition ease-in-out duration-300">in</button><!--
         --><button disabled="@(!_useInches)" @onclick="ToggleUnits" class="bg-gray-100 disabled:bg-black disabled:text-white px-3.5 py-1 rounded-l-none rounded-r-md w-14 transition ease-in-out duration-300">mm</button>
		</div>

        @if (OrderState.Order.Products.Count == 0) {
            <span>No products in order</span>
        } else {

            var first = Rooms.FirstOrDefault();
            var last = Rooms.LastOrDefault();
            foreach (var room in Rooms) {

                <div class="py-3 bg-gray-100 cursor-pointer hover:bg-gray-200 border border-gray-200 @(room.Equals(first) ? "rounded-t-md" : "") @(room.Equals(last) ? "rounded-b-md" : "")">
                    <header>
                        <input type="text" placeholder="Room @(Rooms.IndexOf(room) + 1)" @oninput="a => OnRoomNameChanged(a, room)" value="@room.Name" class="bg-transparent font-bold text-xl pl-3 pt-3"/>
                        <div class="pl-3">
                            <Button OnClickAsync="() => SaveRoomNameChange(room)" Size="ButtonSize.XSmall" Style="ButtonStyle.Text" Disabled="!room.IsDirty">Save</Button>
                        </div>
                    </header>
                    <div class="bg-white px-3 py-10 space-y-5">
                        @if (room.DovetailDrawerBoxes.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">Dovetail Drawer Boxes (@room.DovetailDrawerBoxes.Count)</h3>
                                <DovetailDrawerBoxProductTable UseInches="@_useInches" DrawerBoxes="@room.DovetailDrawerBoxes" Context="product">
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </DovetailDrawerBoxProductTable>
                            </div>
                        }

                        @if (room.DoweledDrawerBoxes.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">Doweled Drawer Boxes (@room.DoweledDrawerBoxes.Count)</h3>
                                <DoweledDrawerBoxProductTable UseInches="@_useInches" DrawerBoxes="@room.DoweledDrawerBoxes" Context="product">
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </DoweledDrawerBoxProductTable>
                            </div>
                        }
       
                        @if (room.Cabinets.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">Cabinets (@room.Cabinets.Count)</h3>
                                <CabinetProductTable UseInches="@_useInches" Cabinets="@room.Cabinets" Context="product">
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </CabinetProductTable>
                            </div>
                        }

                        @if (room.CabinetParts.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">Cabinet Extra Parts (@room.CabinetParts.Count)</h3>
                                <CabinetPartProductTable UseInches="@_useInches" CabinetParts="@room.CabinetParts" Context="product" >
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </CabinetPartProductTable>
                            </div>
                        }
    
                        @if (room.ClosetParts.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">Closet Parts (@room.ClosetParts.Count)</h3>
                                <ClosetPartProductTable UseInches="@_useInches" ClosetParts="@room.ClosetParts" Context="product">
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </ClosetPartProductTable>
                            </div>
                        }
     
                        @if (room.ZargenDrawers.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">Zargen Drawers (@room.ZargenDrawers.Count)</h3>
                                <ZargenDrawerProductTable UseInches="@_useInches" ZargenDrawers="@room.ZargenDrawers" Context="product">
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </ZargenDrawerProductTable>
                            </div>
                        }
    
                        @if (room.MDFDoors.Any()) {
                            <div>
                                <h3 class="font-semibold text-lg pl-3">MDF Doors (@room.MDFDoors.Count)</h3>
                                <MDFDoorProductTable UseInches="@_useInches" MDFDoors="@room.MDFDoors" Context="product">
                                    <ActionColumn>
                                        @ProductActionsColumn?.Invoke(product)
                                    </ActionColumn>
                                </MDFDoorProductTable>
                            </div>
                        }
                    </div>
                </div>


            }

        }

    </section>

    <section class="mt-16" id="additionalItems">

        <div class="mb-5">
            <span class="font-bold text-xl">@OrderState.Order.AdditionalItems.Count Additional Items</span>
        </div>

        <div class="border rounded-md">
	        <table class="table-auto w-full">
		        <thead class="border-b bg-gray-100">
                    <tr>
		    		    <th class="p-5">Description</th>
		    		    <th class="p-5">Price</th>
		    	    </tr>
		        </thead>
		        <tbody>
                    @if (OrderState.Order.AdditionalItems.Count == 0) {
                        <tr>
                            <td colspan="2" class="text-center p-5 font-medium">No Additional Items in Order</td>
                        </tr>
                    }
                    @foreach (var item in OrderState.Order.AdditionalItems) {
                        <tr class="text-center hover:bg-blue-500/10 cursor-pointer">
                            <td class="p-5 border-b font-medium">@item.Description</td>
                            <td class="p-5 border-b">$@item.Price.ToString("0.00")</td>
		    	        </tr>
                    }
		        </tbody>
	        </table>
        </div>

	</section>

}
