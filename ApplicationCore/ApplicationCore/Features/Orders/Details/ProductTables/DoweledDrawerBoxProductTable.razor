@using ApplicationCore.Features.Orders.Shared.Domain.Products;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Shared.Components
@using ApplicationCore.Infrastructure;
@using ApplicationCore.Features.Orders.Shared;
@using ApplicationCore.Features.Orders.Shared.Domain.Enums;
@using static ApplicationCore.Features.Orders.Details.OrderDetails;
@using ApplicationCore.Infrastructure.Bus;
@inject IBus Bus

<div class="overflow-x-auto rounded-md">
    <table class="table-auto">
        <thead class="border-b border-slate-300">
            <tr>
                <th></th>
                <th class="p-5">#</th>
                <th class="p-5">Qty</th>
                <th class="p-5">Height</th>
                <th class="p-5">Width</th>
                <th class="p-5">Depth</th>
                <th class="p-5">F/B Adj.</th>
                <th class="p-5">Front Material</th>
                <th class="p-5">Side Material</th>
                <th class="p-5">Back Material</th>
                <th class="p-5">Bottom Material</th>
                <th class="p-5">Machine for UM</th>
                <th class="p-5">Unit $</th>
                <th class="p-5">Ext. $</th>
            </tr>
        </thead>
        <tbody>
            @{
                foreach (var row in DrawerBoxes) {
                    <tr>
                        <td>
                            @if (row.IsComplete) {
                                <ToolTip UnderLine="false" Text="Complete" Offset="ToolTip.OffsetSide.Right">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-green-600">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </ToolTip>
                            } else {
                                <ToolTip UnderLine="false" Text="Incomplete" Offset="ToolTip.OffsetSide.Right">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-600">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </ToolTip>
                            }
                        </td>
                        <td class="whitespace-nowrap p-5 border-b text-center">@row.Product.ProductNumber</td>
                        <td class="whitespace-nowrap p-5 border-b text-center">@row.Product.Qty</td>
                        @if (UseInches) {
                            <td class="whitespace-nowrap p-5 border-b text-center">@((MarkupString)row.Product.Height.GetFormatedFraction())"</td>
                            <td class="whitespace-nowrap p-5 border-b text-center">@((MarkupString)row.Product.Width.GetFormatedFraction())"</td>
                            <td class="whitespace-nowrap p-5 border-b text-center">@((MarkupString)row.Product.Depth.GetFormatedFraction())"</td>
                            <td class="whitespace-nowrap p-5 border-b text-center">@((MarkupString)row.Product.FrontBackHeightAdjustment.GetFormatedFraction())</td>
                        } else {
                            <td class="whitespace-nowrap p-5 border-b text-center">@row.Product.Height.AsMillimeters().ToString("0.00")</td>
                            <td class="whitespace-nowrap p-5 border-b text-center">@row.Product.Width.AsMillimeters().ToString("0.00")</td>
                            <td class="whitespace-nowrap p-5 border-b text-center">@row.Product.Depth.AsMillimeters().ToString("0.00")</td>
                            <td class="whitespace-nowrap p-5 border-b text-center">@row.Product.FrontBackHeightAdjustment.AsMillimeters().ToString("0.00")</td>
                        }
                        <td class="whitespace-nowrap p-5 border-b">@((MarkupString)MaterialString(row.Product.FrontMaterial, UseInches))</td>
                        <td class="whitespace-nowrap p-5 border-b">@((MarkupString)MaterialString(row.Product.SideMaterial,UseInches))</td>
                        <td class="whitespace-nowrap p-5 border-b">@((MarkupString)MaterialString(row.Product.BackMaterial,UseInches))</td>
                        <td class="whitespace-nowrap p-5 border-b">@((MarkupString)MaterialString(row.Product.BottomMaterial,UseInches))</td>
                        <td class="whitespace-nowrap p-5 border-b text-center">@(row.Product.MachineThicknessForUMSlides ? "Y" : "N")</td>
                        <td class="whitespace-nowrap p-5 border-b text-center">$@row.Product.UnitPrice.ToString("0.00")</td>
                        <td class="whitespace-nowrap p-5 border-b text-center">$@((row.Product.UnitPrice * row.Product.Qty).ToString("0.00"))</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {

    [Parameter]
    public IEnumerable<DoweledDrawerBoxRowModel> DrawerBoxes { get; set; } = Enumerable.Empty<DoweledDrawerBoxRowModel>();

    [Parameter]
    public bool UseInches { get; set; } = false;

    public class DoweledDrawerBoxRowModel : ProductRowModel<DoweledDrawerBoxProduct> {
        public DoweledDrawerBoxRowModel(DoweledDrawerBoxProduct product) : base(product) { }
    }

    public string MaterialString(DoweledDrawerBoxMaterial material, bool useInches) {

        if (useInches) {
            return $"{material.Name}\\{material.Thickness.GetFormatedFraction()}\\Grained:{(material.IsGrained ? "Y" : "N")}";
        }
        return $"{material.Name}\\{material.Thickness.AsMillimeters().ToString("0.00")}\\Grained:{(material.IsGrained ? "Y" : "N")}";

    }

}
