@using ApplicationCore.Features.Orders.Shared.Domain.Products;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Shared.Components
@using static ApplicationCore.Features.Orders.Details.OrderDetails;
@using ApplicationCore.Features.Orders.Shared.Domain.Products.Cabinets;

<div class="overflow-x-auto rounded-md">
    <table class="table-auto">
        <thead class="border-b border-slate-300">
            <tr>
                <th class="p-5">#</th>
                <th class="p-5">Qty</th>
                <th class="p-5">Height</th>
                <th class="p-5">Width</th>
                <th class="p-5">Depth</th>
                <th class="p-5">Box Material</th>
                <th class="p-5">Fin Material</th>
                <th class="p-5">Fin Paint</th>
                <th class="p-5">Doors</th>
                <th class="p-5">Door Paint</th>
                <th class="p-5">EB Color</th>
                <th class="p-5">Left</th>
                <th class="p-5">Right</th>
                <th class="p-5">Assembled</th>
                <th class="p-5">Unit $</th>
                <th class="p-5">Ext. $</th>
            </tr>
        </thead>
            @foreach (var row in Cabinets) {
                <tbody class="hover:bg-blue-500/10">
                    <tr>
                        <td class="@GetCellClass(row)">@row.ProductNumber</td>
                        <td class="@GetCellClass(row)">@row.Qty</td>
                        @if (UseInches) {
                            <td class="@GetCellClass(row)">@((MarkupString)row.Height.GetFormatedFraction())"</td>
                            <td class="@GetCellClass(row)">@((MarkupString)row.Width.GetFormatedFraction())"</td>
                            <td class="@GetCellClass(row)">@((MarkupString)row.Depth.GetFormatedFraction())"</td>
                        } else {
                            <td class="@GetCellClass(row)">@row.Height.AsMillimeters().ToString("0.00")</td>
                            <td class="@GetCellClass(row)">@row.Width.AsMillimeters().ToString("0.00")</td>
                            <td class="@GetCellClass(row)">@row.Depth.AsMillimeters().ToString("0.00")</td>
                        }
                        <td class="@GetCellClass(row)">@($"{row.BoxMaterial.Finish}/{row.BoxMaterial.FinishType}/{row.BoxMaterial.Core}")</td>
                        <td class="@GetCellClass(row)">@($"{row.FinishMaterial.Finish}/{row.FinishMaterial.FinishType}/{row.FinishMaterial.Core}")</td>
                        <td class="@GetCellClass(row)">@($"{row.FinishMaterial.PaintColor ?? "N/A"}")</td>
                        <td class="@GetCellClass(row)">@(GetDoorMaterialStyle(row))</td>
                        <td class="@GetCellClass(row)">@(GetDoorPaint(row))</td>
                        <td class="@GetCellClass(row)">@row.EdgeBandingColor</td>
                        <td class="@GetCellClass(row)">@row.LeftSideType.ToString()</td>
                        <td class="@GetCellClass(row)">@row.RightSideType.ToString()</td>
                        <td class="@GetCellClass(row)">@(row.Assembled ? "Yes" : "No")</td>
                        <td class="@GetCellClass(row)">@row.UnitPrice.ToString("$0.00")</td>
                        <td class="@GetCellClass(row)">@((row.UnitPrice * row.Qty).ToString("$0.00"))</td>
                    </tr>

                    @if(row.Comment != string.Empty) {
                        <tr>
                            <td class="p-5 font-bold border-b text-red-500" colspan="17">
                                @row.Comment
                            </td>
                        </tr>
                    }
                    @foreach(var note in row.ProductionNotes) {
                        <tr>
                            <td class="p-5 font-bold border-b text-red-500" colspan="17">
                                @note
                            </td>
                        </tr>
                    }
                </tbody>
            }
    </table>
</div>

@code {

    [Parameter]
    public IEnumerable<Cabinet> Cabinets { get; set; } = Enumerable.Empty<Cabinet>();

    [Parameter]
    public bool UseInches { get; set; }

    public string GetCellClass(Cabinet product) {
        return $"whitespace-nowrap p-5 text-center {(product.Comment != string.Empty ? "" : "border-b")}";
    }

    public string GetDoorMaterialStyle(Cabinet cabinet) {

        if (cabinet.SlabDoorMaterial is null && cabinet.MDFDoorOptions is null) {
            return "N/A";
        }

        if (cabinet.SlabDoorMaterial is CabinetSlabDoorMaterial slabMaterial) {
            return $"{slabMaterial.Finish}/{slabMaterial.FinishType}/{slabMaterial.Core}";
        }

        if (cabinet.MDFDoorOptions is MDFDoorOptions mdfDoorOptions) {
            return $"{mdfDoorOptions.Material} {mdfDoorOptions.FramingBead}";
        }

        return "Unknown/Buyout";

    }

    public string GetDoorPaint(Cabinet cabinet) {

        if (cabinet.SlabDoorMaterial is null && cabinet.MDFDoorOptions is null) {
            return "N/A";
        }

        if (cabinet.SlabDoorMaterial is CabinetSlabDoorMaterial slabMaterial) {
            return $"{slabMaterial.PaintColor ?? "N/A"}";
        }

        if (cabinet.MDFDoorOptions is MDFDoorOptions mdfDoorOptions) {
            return $"{mdfDoorOptions.PaintColor ?? "N/A"}";
        }

        return "Unknown/Buyout";

    }

}
