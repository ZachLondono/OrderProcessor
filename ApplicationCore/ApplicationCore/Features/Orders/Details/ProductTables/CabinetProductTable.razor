@using ApplicationCore.Features.Orders.Shared.Domain.Products;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Features.Shared.Components
@using static ApplicationCore.Features.Orders.Details.OrderDetails;

<div class="overflow-x-auto rounded-md">
    <table class="table-auto">
        <thead class="border-b border-slate-300">
            <tr class="dark:bg-slate-700 dark:text-gray-500">
                <th></th>
                <th class="p-5">#</th>
                <th class="p-5">Qty</th>
                <th class="p-5">Height</th>
                <th class="p-5">Width</th>
                <th class="p-5">Depth</th>
                <th class="p-5">Box Material</th>
                <th class="p-5">Fin Material</th>
                <th class="p-5">Fin Paint</th>
                <th class="p-5">Doors</th>
                <th class="p-5">Door Paint</th>
                <th class="p-5">EB Color</th>
                <th class="p-5">Left</th>
                <th class="p-5">Right</th>
                <th class="p-5">Assembled</th>
                <th class="p-5">Room</th>
                <th class="p-5">Unit $</th>
                <th class="p-5">Ext. $</th>
            </tr>
        </thead>
            @foreach (var row in Cabinets) {
                <tbody class="hover:bg-blue-500/10">
                    <tr>
                        <td>
                            @if (row.IsComplete) {
                                <ToolTip UnderLine="false" Text="Complete" Offset="ToolTip.OffsetSide.Right">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-green-600">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </ToolTip>
                            } else {
                                <ToolTip UnderLine="false" Text="Incomplete" Offset="ToolTip.OffsetSide.Right">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-600">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </ToolTip>
                            }
                        </td>
                        <td class="@row.CellClass">@row.Product.ProductNumber</td>
                        <td class="@row.CellClass">@row.Product.Qty</td>
                        @if (UseInches) {
                            <td class="@row.CellClass">@((MarkupString)row.Product.Height.GetFormatedFraction())"</td>
                            <td class="@row.CellClass">@((MarkupString)row.Product.Width.GetFormatedFraction())"</td>
                            <td class="@row.CellClass">@((MarkupString)row.Product.Depth.GetFormatedFraction())"</td>
                        } else {
                            <td class="@row.CellClass">@row.Product.Height.AsMillimeters().ToString("0.00")</td>
                            <td class="@row.CellClass">@row.Product.Width.AsMillimeters().ToString("0.00")</td>
                            <td class="@row.CellClass">@row.Product.Depth.AsMillimeters().ToString("0.00")</td>
                        }
                        <td class="@row.CellClass">@($"{row.Product.BoxMaterial.Finish}/{row.Product.BoxMaterial.FinishType}/{row.Product.BoxMaterial.Core}")</td>
                        <td class="@row.CellClass">@($"{row.Product.FinishMaterial.Finish}/{row.Product.FinishMaterial.FinishType}/{row.Product.FinishMaterial.Core}")</td>
                        <td class="@row.CellClass">@($"{row.Product.FinishMaterial.PaintColor ?? "N/A"}")</td>
                        <td class="@row.CellClass">@(GetDoorMaterialStyle(row.Product))</td>
                        <td class="@row.CellClass">@(GetDoorPaint(row.Product))</td>
                        <td class="@row.CellClass">@row.Product.EdgeBandingColor</td>
                        <td class="@row.CellClass">@row.Product.LeftSideType.ToString()</td>
                        <td class="@row.CellClass">@row.Product.RightSideType.ToString()</td>
                        <td class="@row.CellClass">@(row.Product.Assembled ? "Yes" : "No")</td>
                        <td class="@row.CellClass">@row.Product.Room</td>
                        <td class="@row.CellClass">@row.Product.UnitPrice.ToString("$0.00")</td>
                        <td class="@row.CellClass">@((row.Product.UnitPrice * row.Product.Qty).ToString("$0.00"))</td>
                    </tr>

                    @if(row.Product.Comment != string.Empty) {
                        <tr>
                            <td class="p-5 font-bold border-b text-red-500" colspan="18">
                                @row.Product.Comment
                            </td>
                        </tr>
                    }
                </tbody>
            }
    </table>
</div>

@code {

    [Parameter]
    public IEnumerable<CabinetRowModel> Cabinets { get; set; } = Enumerable.Empty<CabinetRowModel>();

    [Parameter]
    public bool UseInches { get; set; }

    public class CabinetRowModel : ProductRowModel<Cabinet> {

        public string CellClass;

        public CabinetRowModel(Cabinet product) : base(product) {
            CellClass = $"whitespace-nowrap p-5 text-center {(product.Comment != string.Empty ? "" : "border-b")}";
        }

    }

    public string GetDoorMaterialStyle(Cabinet cabinet) {

        if (cabinet.SlabDoorMaterial is null && cabinet.MDFDoorOptions is null) {
            return "N/A";
        }

        if (cabinet.SlabDoorMaterial is CabinetSlabDoorMaterial slabMaterial) {
            return $"{slabMaterial.Finish}/{slabMaterial.FinishType}/{slabMaterial.Core}";
        }

        if (cabinet.MDFDoorOptions is MDFDoorOptions mdfDoorOptions) {
            return $"{mdfDoorOptions.Material} {mdfDoorOptions.FramingBead}";
        }

        return "Unknown/Buyout";

    }

    public string GetDoorPaint(Cabinet cabinet) {

        if (cabinet.SlabDoorMaterial is null && cabinet.MDFDoorOptions is null) {
            return "N/A";
        }

        if (cabinet.SlabDoorMaterial is CabinetSlabDoorMaterial slabMaterial) {
            return $"{slabMaterial.PaintColor ?? "N/A"}";
        }

        if (cabinet.MDFDoorOptions is MDFDoorOptions mdfDoorOptions) {
            return $"{mdfDoorOptions.PaintColor ?? "N/A"}";
        }

        return "Unknown/Buyout";

    }

}
