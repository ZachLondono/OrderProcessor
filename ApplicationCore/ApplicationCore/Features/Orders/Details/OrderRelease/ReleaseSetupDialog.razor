@using ApplicationCore.Features.Companies.Contracts;
@using ApplicationCore.Features.Orders.Details.OrderRelease;
@using static ApplicationCore.Features.Shared.Components.Button;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Features.Orders.Shared.Domain.Entities;
@using ApplicationCore.Features.Orders.Shared.State;
@using ApplicationCore.Features.Shared.Components
@using ApplicationCore.Features.Shared.Services;
@using Microsoft.Extensions.Options;
@inject IFilePicker FilePicker
@inject CompanyDirectory.GetVendorByIdAsync GetVendorByIdAsync
@inject CompanyDirectory.GetCustomerByIdAsync GetCustomerByIdAsync
@inject OrderState OrderState

@if (Configuration is null) {
    <span>Loading release configuration...</span>
} else {

    <div class="flex flex-col space-y-5">

        @if(_errorMessage is not null) {
            
            <section>
                <span class="text-red-600">@_errorMessage</span>
            </section>

        }

        <section>

            <h3 class="font-semibold mb-3">Release PDF</h3>

            <CheckBox @bind-IsChecked="Configuration.GenerateJobSummary">
                <span class="text-gray-700">Job Summary</span>
            </CheckBox>
            
            <br />
            
            <CheckBox @bind-IsChecked="Configuration.GeneratePackingList">
                <span class="text-gray-700">Packing List</span>
            </CheckBox>
            
            <br />
            
            <CheckBox @bind-IsChecked="Configuration.GenerateCNCRelease">
                <span class="text-gray-700">CNC Patterns</span>
            </CheckBox>
            @if (Configuration.GenerateCNCRelease) {
                <div class="mt-3">
                    @if (_isReportLoadingFiles) {
                        <span>Searching for files...</span>
                    } else {
                        <Button OnClickAsync="ChooseCNCDataFile" Color="ButtonColor.Secondary">+ Add File</Button>

                        @if (Configuration.CNCDataFilePaths.Any()) {
                            foreach (var file in Configuration.CNCDataFilePaths) {
                                <div class="text-sm">
                                    <Button OnClick="@(() => RemoveCNCDataFile(file))">X</Button>@TruncateString(file)
                                </div>
                            }
                        } else {
                            <div class="text-sm">No File Selected</div>
                        }
                    }
                </div>
            }

            @if (Configuration.GenerateJobSummary || Configuration.GeneratePackingList || Configuration.GenerateCNCRelease) {

                <br />

                <CheckBox @bind-IsChecked="Configuration.IncludeInvoiceInRelease">
                    <span class="text-gray-700">Include Invoice</span>
                </CheckBox>

                <br />

                <CheckBox @bind-IsChecked="Configuration.SendReleaseEmail">
                    <span class="text-gray-700">Send Email</span>
                </CheckBox>
                @if (Configuration.SendReleaseEmail) {
                    <label class="block text-sm font-medium text-gray-700">Email Recipients</label>
                    <input type="text" class="mt-1 w-full" @bind="@Configuration.ReleaseEmailRecipients" />
                }

                <br />

                <label class="block text-sm font-medium text-gray-700">Output Directory</label>
                <input type="text" class="mt-1 w-full" @bind="Configuration.ReleaseOutputDirectory" />

            }

        </section>

        <hr />

        <section>

            <h3 class="font-semibold mb-3">Invoice</h3>

            <CheckBox @bind-IsChecked="Configuration.GenerateInvoice">
                <span class="text-gray-700">Save Invoice PDF</span>
            </CheckBox>
            @if (Configuration.GenerateInvoice) {
                <label class="block text-sm font-medium text-gray-700">Output Directory</label>
                <input type="text" class="mt-1 w-full" @bind="Configuration.InvoiceOutputDirectory" />
            }

            <br />

            <CheckBox @bind-IsChecked="Configuration.SendInvoiceEmail">
                <span class="text-gray-700">Send Invoice Email</span>
            </CheckBox>
            @if (Configuration.SendInvoiceEmail) {
                <label class="block text-sm font-medium text-gray-700">Email Recipients</label>
                <input type="text" class="mt-1 w-full" @bind="Configuration.InvoiceEmailRecipients"/>
            }

        </section>

        <section>
            <Button Color="ButtonColor.Primary" Style="ButtonStyle.Text" OnClickAsync="Release">Release</Button>
            <Button Color="ButtonColor.Secondary" Style="ButtonStyle.Text" OnClickAsync="Cancel">Cancel</Button>
        </section>

    </div>
}

@code {

    [CascadingParameter]
    private BlazoredModalInstance ModalInstance { get; set; } = default!;

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    public ReleaseConfiguration? Configuration { get; set; } = null;
    private string? _errorMessage = null;

    private bool _isReportLoadingFiles = true;

    protected override async Task OnInitializedAsync() {

        var order = OrderState.Order;
        if (order is null) {
            return;
        }

        await LoadConfiguration(order);
        await LoadCNCReportFiles(order);

    }

    private async Task LoadConfiguration(Order order) {

        var vendor = await GetVendorByIdAsync(order.VendorId);
        if (vendor is null) {
            return;
        }

        string releaseDirectory = Path.Combine(order.WorkingDirectory, "CUTLISTS");
        string invoiceDirectory = Path.Combine(order.WorkingDirectory, "Invoices");

        Configuration = new() {

                SendReleaseEmail = vendor.ReleaseProfile.SendReleaseEmail,
                ReleaseEmailRecipients = vendor.ReleaseProfile.ReleaseEmailRecipients,
                GenerateJobSummary = vendor.ReleaseProfile.GenerateJobSummary,
                GeneratePackingList = vendor.ReleaseProfile.GeneratePackingList,
                IncludeInvoiceInRelease = vendor.ReleaseProfile.IncludeInvoice,
                ReleaseOutputDirectory = releaseDirectory,
                GenerateCNCRelease = false,

                GenerateInvoice = vendor.ReleaseProfile.GenerateInvoice,
                SendInvoiceEmail = vendor.ReleaseProfile.SendInvoiceEmail,
                InvoiceEmailRecipients = vendor.ReleaseProfile.InvoiceEmailRecipients,
                InvoiceOutputDirectory = invoiceDirectory,

                EmailSenderName = vendor.EmailSender.Name,
                EmailSenderEmail = vendor.EmailSender.Email,
                EmailSenderPassword = vendor.EmailSender.ProtectedPassword

            };

        var customer = await GetCustomerByIdAsync(order.CustomerId);
        if (customer is not null && customer.BillingContact.Email is string invoiceEmail) {

            if (!string.IsNullOrEmpty(Configuration.InvoiceEmailRecipients))
                Configuration.InvoiceEmailRecipients = invoiceEmail + ";" + Configuration.InvoiceEmailRecipients;
            else Configuration.InvoiceEmailRecipients = invoiceEmail;

        }
        StateHasChanged();
    }

    private async Task LoadCNCReportFiles(Order order) {
        if (Configuration is null) return;
        var files = await GetReportFiles(order.Number);
        Configuration.CNCDataFilePaths.AddRange(files);
        Configuration.GenerateCNCRelease = Configuration.CNCDataFilePaths.Any();
        _isReportLoadingFiles = false;
        StateHasChanged();
    }

    private async Task<string[]> GetReportFiles(string number) {
        return await Task.Run(() => {
            try {
                return Directory.GetFiles(@"Y:\CADCode\Reports\", $"{number}* - *.xml");
            } catch {
                return Array.Empty<string>();
            }
        });
    }

    private void RemoveCNCDataFile(string filePath) {
        Configuration?.CNCDataFilePaths.Remove(filePath);
        StateHasChanged();
    }

    private async Task ChooseCNCDataFile() {

        if (Configuration is null) return;

        var waitingDialog = ShowLoadingDialog("Waiting", "Select Report File.");

        string selectedPath = "";
        bool wasPicked = await FilePicker.PickFileAsync("Select CADCode WS Report File", "C:\\", new("CADCode WS Report", "xml"), (file) => {
            selectedPath = file;
        });

        waitingDialog.Close();

        if (!wasPicked || selectedPath == "") {
            return;
        }

        Configuration.CNCDataFilePaths.Add(selectedPath);
        StateHasChanged();

    }
    
    private IModalReference ShowLoadingDialog(string title, string message) {

        var options = new ModalOptions() {
                HideHeader = true,
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };

        return ModalService.Show<InformationDialog>("", options: options, parameters: new ModalParameters {
            { "Type", InformationDialog.MessageType.Information },
            { "Title", title},
            { "Details", message }
        });

    }

    private string TruncateString(string value) {

        if (value.Length < 50) return value;

        return $"...{value[(value.Length - 27)..]}";

    }

    private async Task Cancel() {

        await ModalInstance.CancelAsync();

    }

    private async Task Release() {

        _errorMessage = null;

        if (Configuration is null) {
            _errorMessage = "Could not load release configuration";
            return;
        }

        var parameters = new ModalParameters() {
            { "Configuration",  Configuration }
        };

        var options = new ModalOptions() {
                HideHeader = true,
                HideCloseButton = true,
                DisableBackgroundCancel = true,
                Size = ModalSize.Large
            };

        var dialog = ModalService.Show<ReleaseProgressDialog>("Order Release Progress", parameters, options);

        _ = await dialog.Result;

        await ModalInstance.CloseAsync();
    }

}
