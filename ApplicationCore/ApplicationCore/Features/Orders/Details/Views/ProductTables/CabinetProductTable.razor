@using ApplicationCore.Features.Orders.Shared.Domain.Products;
@using ApplicationCore.Features.Orders.Shared.Domain;
@using ApplicationCore.Features.Orders.Shared.Domain.ValueObjects;
@using ApplicationCore.Shared.Components
@using static ApplicationCore.Features.Orders.Details.Views.OrderDetails;
@using ApplicationCore.Features.Orders.Shared.Domain.Products.Cabinets;

<div class="overflow-x-auto">
    <table class="table-auto w-full">
        <thead class="border-b">
            <tr>
                <th class="p-5">#</th>
                <th class="p-5">Qty</th>
                <th class="p-5">SKU</th>
                <th class="p-5">Height</th>
                <th class="p-5">Width</th>
                <th class="p-5">Depth</th>
                <th class="p-5">Unit $</th>
                <th class="p-5">Ext. $</th>
                <th></th>
            </tr>
        </thead>
            @foreach (var row in Cabinets) {
                <tbody class="hover:bg-blue-500/10 border-b">
                    <tr>
                        <td class="whitespace-nowrap p-5 text-center">@row.ProductNumber</td>
                        <td class="whitespace-nowrap p-5 text-center">@row.Qty</td>
                        <td class="whitespace-nowrap p-5 text-center">@row.GetProductSku()</td>
                        @if (UseInches) {
                            <td class="whitespace-nowrap p-5 text-center">@((MarkupString)row.Height.GetFormatedFraction())"</td>
                            <td class="whitespace-nowrap p-5 text-center">@((MarkupString)row.Width.GetFormatedFraction())"</td>
                            <td class="whitespace-nowrap p-5 text-center">@((MarkupString)row.Depth.GetFormatedFraction())"</td>
                        } else {
                            <td class="whitespace-nowrap p-5 text-center">@row.Height.AsMillimeters().ToString("0.00")</td>
                            <td class="whitespace-nowrap p-5 text-center">@row.Width.AsMillimeters().ToString("0.00")</td>
                            <td class="whitespace-nowrap p-5 text-center">@row.Depth.AsMillimeters().ToString("0.00")</td>
                        }
                        <td class="whitespace-nowrap p-5 text-center">@row.UnitPrice.ToString("$0.00")</td>
                        <td class="whitespace-nowrap p-5 text-center">@((row.UnitPrice * row.Qty).ToString("$0.00"))</td>
                        <td class="p-5">
                            @if (ActionColumn is not null) {
                                @ActionColumn(row)
                            }
                        </td>
                    </tr>

                    @if(row.Comment != string.Empty) {
                        <tr>
                            <td class="p-5 font-bold text-red-500" colspan="9">
                                Customer Comment @row.Comment
                            </td>
                        </tr>
                    }
                    @foreach(var note in row.ProductionNotes) {
                        <tr>
                            <td class="p-5 font-bold text-red-500" colspan="9">
                                @note
                            </td>
                        </tr>
                    }
                </tbody>
            }
    </table>
</div>

@code {

    [Parameter]
    public RenderFragment<IProduct>? ActionColumn { get; set; } = null;

    [Parameter]
    public IEnumerable<Cabinet> Cabinets { get; set; } = Enumerable.Empty<Cabinet>();

    [Parameter]
    public bool UseInches { get; set; }

    public string GetDoorMaterialStyle(Cabinet cabinet) {

        if (cabinet.SlabDoorMaterial is null && cabinet.MDFDoorOptions is null) {
            return "N/A";
        }

        if (cabinet.SlabDoorMaterial is CabinetSlabDoorMaterial slabMaterial) {
            return $"{slabMaterial.Finish}/{slabMaterial.FinishType}/{slabMaterial.Core}";
        }

        if (cabinet.MDFDoorOptions is MDFDoorOptions mdfDoorOptions) {
            return $"{mdfDoorOptions.Material} {mdfDoorOptions.FramingBead}";
        }

        return "Unknown/Buyout";

    }

    public string GetDoorPaint(Cabinet cabinet) {

        if (cabinet.SlabDoorMaterial is null && cabinet.MDFDoorOptions is null) {
            return "N/A";
        }

        if (cabinet.SlabDoorMaterial is CabinetSlabDoorMaterial slabMaterial) {
            return $"{slabMaterial.PaintColor ?? "N/A"}";
        }

        if (cabinet.MDFDoorOptions is MDFDoorOptions mdfDoorOptions) {
            return $"{mdfDoorOptions.PaintColor ?? "N/A"}";
        }

        return "Unknown/Buyout";

    }

}
