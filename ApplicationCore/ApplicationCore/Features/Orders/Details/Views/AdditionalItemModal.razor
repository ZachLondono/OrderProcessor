@using Domain.Orders.Entities;
@using Domain.Orders.Persistance;
@using Domain.Infrastructure.Bus;
@using Domain.Components
@using static Domain.Components.Button;
@using ApplicationCore.Features.Orders.Details.Models;
@inject IBus Bus;

@if (_editModel is null) {

    <div>
        No data found to edit
    </div>
    
} else {
    
    <EditForm Model="@_editModel" OnValidSubmit="SaveChanges">
    
        <div class="mb-3">
            Qty
            <InputNumber @bind-Value="@_editModel.Qty" class="w-24 px-3 py-2 rounded-md max-w-md border focus:outline-0 border-gray-300 focus:border-primary focus:ring-2 focus:ring-primary ease-in-out duration-300"  />
        </div>

        <div class="mb-3">
            <label>Description</label>
            <InputText @bind-Value="@_editModel.Description" class="input-text w-full" />
        </div>
    
        <div class="mb-3">
            <label>Price</label>
            <InputNumber @bind-Value="@_editModel.UnitPrice" class="w-24 px-3 py-2 rounded-md max-w-md border focus:outline-0 border-gray-300 focus:border-primary focus:ring-2 focus:ring-primary ease-in-out duration-300" />
        </div>

        <Button type="submit" Color="ButtonColor.Success">Save</Button>
        <Button Color="ButtonColor.Danger" OnClickAsync="Delete">Delete</Button>
    
    </EditForm>

}

@code {

    [Parameter]
    public AdditionalItem? Item { get; set; }

    [CascadingParameter]
    private BlazoredModalInstance ModalInstance { get; set; } = default!;

    private AdditionalItemModel? _editModel;

    private Error? _error;


    protected override void OnInitialized() {
        if (Item is null) return; 
        _editModel = new() {
            Id = Item.Id,
            Qty = Item.Qty,
            Description = Item.Description,
            UnitPrice = Item.UnitPrice
        };
    }

    private async Task SaveChanges() {

        if (_editModel is null) return;

        var item = new AdditionalItem(_editModel.Id, _editModel.Qty, _editModel.Description, _editModel.UnitPrice);

        var result = await Bus.Send(new UpdateAdditionalItem.Command(item));

        if (result.IsError) {

            result.OnError(error => _error = error);
            return;

        }

        await ModalInstance.CloseAsync(ModalResult.Ok(item));

    }

    private async Task Delete() {

        if (_editModel is null) return;

        var result = await Bus.Send(new RemoveAdditionalItem.Command(_editModel.Id));

        if (result.IsError) {
            
            result.OnError(error => _error = error);
            return;

        }

        await ModalInstance.CloseAsync(ModalResult.Ok());

    }

}
