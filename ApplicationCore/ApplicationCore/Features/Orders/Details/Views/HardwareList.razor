@using Domain.Components
@using static Domain.Components.Button

<section class="mt-16">
    <div class="mb-5">
        <span class="font-bold text-xl">Hardware</span>
        @if (!IsLoading) {
            <Button Style="ButtonStyle.Text" OnClickAsync="AddSupply" Color="ButtonColor.Primary">+ Add</Button>
        }
    </div>
    <div class="border border-slate-100 rounded-md">
        <table class="table-auto w-full rounded-md">
            <thead class="border-b bg-slate-100">
                <tr>
                    <th class="p-5">Qty</th>
                    <th class="p-5">Description</th>
                    <th></th>
                </tr>
            </thead>

            @if (IsLoading) {

                <tbody>
                    <tr>
                        <td>
                            <span>Loading...</span>
                        </td>
                    </tr>
                </tbody>

            } else if (Hardware is null) {

                <tbody>
                    <tr>
                        <td>
                            <span>Could not load supplies</span>
                        </td>
                    </tr>
                </tbody>

            } else if (Hardware.Supplies.Count == 0) {

                <tbody>
                    <tr>
                        <td>
                            <span>No hardware.</span>
                        </td>
                    </tr>
                </tbody>

            } else {

                <tbody>
                    @foreach (var supply in Hardware.Supplies) {
                        <tr class="text-center">
                            <td class="p-5 border-b">
                                <input type="number" @bind="@supply.Qty" />
                            </td>
                            <td class="p-5 border-b">
                                <input type="text" @bind="@supply.Description" list="hardware" />
                            </td>
                            <td class="p-5 border-b">
                                <Button Disabled="!supply.IsDirty" Style="ButtonStyle.Text" Color="ButtonColor.Primary" OnClickAsync="() => UpdateSupply(supply)">Save</Button>
                                <Button Style="ButtonStyle.Text" Color="ButtonColor.Danger" OnClickAsync="() => DeleteSupply(supply)">Delete</Button>
                            </td>
                        </tr>
                    }
                </tbody>

            }

            <datalist id="hardware">
                <option value="Standard Door Pull" />
                <option value="Standard Drawer Pull" />
                <option value="Cabinet Leveler" />
                <option value="Hettich Clips (pair) (Grey)" />
                <option value="Hettich Clips (pair) (Black/Blue)" />
                <option value="Hinge, 125" />
                <option value="Hinge Plate" />
                <option value="Hinge, Blind Corner" />
                <option value="Hinge, Cross Corner" />
                <option value="1&quot; Pullout Block" />
                <option value="Adj. Shelf Peg, Locking" />
                <option value="Adj. Shelf Peg, Straight" />
                <option value="Rafix Cam" />
                <option value="Rafix Cam, with Dowel" />
                <option value="Cam Bolt" />
                <option value="Cam Bolt, Double Sided" />
                <option value="Hanging Bracket, LH" />
                <option value="Hanging Bracket Cover, LH" />
                <option value="Hanging Bracket, RH" />
                <option value="Hanging Bracket Cover, RH" />
                <option value="Long Euro Screws, For Hanging Bracket" />
                <option value="xx&quot; Hanging Rail" />
                <option value="xx&quot; Hanging Rail Cover" />
                <option value="Rod Mounting Bracket, Open" />
                <option value="Rod Mounting Bracket, Closed" />
                <option value="Pie Cut Lazy Susan" />
                <option value="Single Trash Pullout" />
                <option value="Double Trash Pullout" />
            </datalist>

        </table>
    </div>
</section>

<section class="mt-16">
    <div class="mb-5">
        <span class="font-bold text-xl">Drawer Slides</span>
        @if (!IsLoading) {
            <Button Style="ButtonStyle.Text" OnClickAsync="AddSlides" Color="ButtonColor.Primary">+ Add</Button>
        }
    </div>
    <div class="border border-slate-100 rounded-md">
        <table class="table-auto w-full rounded-md">

            <thead class="border-b bg-slate-100">

                <tr>
                    <th class="p-5">Qty</th>
                    <th class="p-5">Length</th>
                    <th class="p-5">Style</th>
                    <th></th>
                </tr>

            </thead>

            @if (IsLoading) {

                <tbody>
                    <tr>
                        <td>
                            <span>Loading...</span>
                        </td>
                    </tr>
                </tbody>

            } else if (Hardware is null) {

                <tbody>
                    <tr>
                        <td>
                            <span>Could not load drawer slides</span>
                        </td>
                    </tr>
                </tbody>

            } else if (Hardware.DrawerSlides.Count == 0) {

                <tbody>
                    <tr>
                        <td>
                            <span>No drawer slides.</span>
                        </td>
                    </tr>
                </tbody>

            } else {

                <tbody>
                    @foreach (var slides in Hardware.DrawerSlides) {
                        <tr class="text-center">
                            <td class="p-5 border-b">
                                <input type="number" @bind="@slides.Qty" />
                            </td>
                            <td class="p-5 border-b">
                                <input type="number" value="@slides.Length.AsMillimeters()" @onchange="(e) => HandleSlideLengthChange(e, slides)" />
                            </td>
                            <td class="p-5 border-b">
                                <input type="text" @bind="@slides.Style" />
                            </td>
                            <td class="p-5 border-b">
                                <Button Disabled="!slides.IsDirty" Style="ButtonStyle.Text" OnClickAsync="() => UpdateDrawerSlide(slides)">Save</Button>
                                <Button Style="ButtonStyle.Text" Color="ButtonColor.Danger" OnClickAsync="() => DeleteDrawerSlide(slides)">Delete</Button>
                            </td>
                        </tr>
                    }

                </tbody>

            }

        </table>
    </div>
</section>

<section class="mt-16">
    <div class="mb-5">
        <span class="font-bold text-xl">Hanging Rails</span>
        @if (!IsLoading) {
            <Button Style="ButtonStyle.Text" OnClickAsync="AddRails" Color="ButtonColor.Primary">+ Add</Button>
        }
    </div>
    <div class="border border-slate-100 rounded-md">
        <table class="table-auto w-full rounded-md">

            <thead class="border-b bg-slate-100">
                <tr>
                    <th class="p-5">Qty</th>
                    <th class="p-5">Length (mm)</th>
                    <th class="p-5">Finish</th>
                    <th></th>
                </tr>
            </thead>

            @if (IsLoading) {

                <tbody>
                    <tr>
                        <td>
                            <span>Loading...</span>
                        </td>
                    </tr>
                </tbody>

            } else if (Hardware is null) {

                <tbody>
                    <tr>
                        <td>
                            <span>Could not load hanging rails</span>
                        </td>
                    </tr>
                </tbody>

            } else if (Hardware.HangingRails.Count == 0) {

                <tbody>
                    <tr>
                        <td>
                            <span>No hanging rails.</span>
                        </td>
                    </tr>
                </tbody>

            } else {

                <tbody>
                    @foreach (var rail in Hardware.HangingRails) {
                        <tr class="text-center">
                            <td class="p-5 border-b">
                                <input type="number" @bind="@rail.Qty" />
                            </td>
                            <td class="p-5 border-b">
                                <input type="number" value="@rail.Length.AsMillimeters()" @onchange="(e) => HandleHangingRailLengthChange(e, rail)" />
                            </td>
                            <td class="p-5 border-b">
                                <input type="text" @bind="@rail.Finish" />
                            </td>
                            <td class="p-5 border-b">
                                <Button Disabled="!rail.IsDirty" Style="ButtonStyle.Text" OnClickAsync="() => UpdateHangingRail(rail)">Save</Button>
                                <Button Style="ButtonStyle.Text" Color="ButtonColor.Danger" OnClickAsync="() => DeleteHangingRail(rail)">Delete</Button>
                            </td>
                        </tr>
                    }
                </tbody>

            }

        </table>
    </div>
</section>

