@using ApplicationCore.Features.Orders.Data;
@using ApplicationCore.Features.Orders.Shared.Domain
@using ApplicationCore.Features.Orders.Shared.State;
@using ApplicationCore.Infrastructure
@using ApplicationCore.Features.Shared.Components;
@using static ApplicationCore.Features.Shared.Components.Button;
@using ApplicationCore.Infrastructure.Data;
@using System.Diagnostics;
@inject OrderListViewModel DataContext

<table class="w-full table-auto">

    <thead class="border-b border-slate-300">
        <tr>
            <th class="p-5 text-gray-700">Number</th>
            <th class="p-5 text-gray-700">Name</th>
            <th class="p-5 text-gray-700">Customer</th>
            <th class="p-5 text-gray-700">Vendor</th>
            <th class="p-5 text-gray-700">Items</th>
            <th class="p-5 text-gray-700">Order Date</th>
        </tr>
    </thead>

    @if (DataContext.IsLoading) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-gray-500 text-lg">Loading...</div>
            </td>
        </tr>

    } else if (DataContext.HasError) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-red-600 text-lg">Error loading orders [@DataContext.ErrorMessage]</div>
                <Button Type="button" OnClickAsync="LoadOrders"  Color="ButtonColor.Primary" Disabled="@DataContext.IsLoading">Refresh</Button>
            </td>
        </tr>

    } else if (DataContext.Orders is null) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-gray-500 text-lg">Could not load orders</div>
                <Button Type="button" OnClickAsync="LoadOrders"  Color="ButtonColor.Primary" Disabled="@DataContext.IsLoading">Refresh</Button>
            </td>
        </tr>

    } else if (!DataContext.Orders.Any()) {

        <tr>
            <td colspan="6" class="text-center">
                <div class="my-5 text-gray-500 text-lg">No orders to display.</div>
                <Button Type="button" OnClickAsync="LoadOrders"  Color="ButtonColor.Primary" Disabled="@DataContext.IsLoading">Refresh</Button>
            </td>
        </tr>

    } else {

        <tbody>
            @foreach(var order in DataContext.Orders) {
                <tr class="justify-center hover:bg-slate-200 dark:hover:bg-slate-500 cursor-pointer">
                    <td class="p-5 whitespace-nowrap border-b dark:border-slate-500 dark:text-white" @onclick="async () => await SelectOrder(order.Id)">@order.Number</td>
                    <td class="p-5 whitespace-nowrap border-b dark:border-slate-500 dark:text-white" @onclick="async () => await SelectOrder(order.Id)">@order.Name</td>
                    <td class="p-5 whitespace-nowrap border-b dark:border-slate-500 dark:text-white hover:underline" @onclick="() => DataContext.OpenCustomerPage(order.CustomerId)">@order.CustomerName</td>
                    <td class="p-5 whitespace-nowrap border-b hover:text-underline dark:border-slate-500 dark:text-white hover:underline" @onclick="() => DataContext.OpenVendorPage(order.VendorId)">@order.VendorName</td>
                    <td class="p-5 whitespace-nowrap text-center border-b dark:border-slate-500 dark:text-white" @onclick="async () => await SelectOrder(order.Id)">@order.ItemCount</td>
                    <td class="p-5 whitespace-nowrap text-center border-b dark:border-slate-500 dark:text-white" @onclick="async () => await SelectOrder(order.Id)">@order.OrderDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>

    }

</table>
@if (!DataContext.IsLoading && !DataContext.HasError && DataContext.Orders is not null && DataContext.Orders.Any()) {
    <div class="my-3">
        <span>@DataContext.TotalOrderCount @(DataContext.TotalOrderCount == 1 ? "order" : "orders")</span>
        <div class="float-right">
            <Pagination PageCount="DataContext.PageCount" OnPageSelected="async (i) => await UpdatePage(i)" CurrentPage="DataContext.Page" />
        </div>
    </div>
}

@code {

    [Parameter]
    public Guid? CustomerId { get; set; } 

    [Parameter]
    public Guid? VendorId { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; }

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    protected override void OnInitialized() {

        if (DataContext is null) {
            return;
        }

        DataContext.OnPropertyChanged += () => StateHasChanged();

    }

    protected override async Task OnParametersSetAsync() {
        DataContext.Page = 1;
        await LoadOrders();
    }

    private async Task UpdatePage(int page) {
        DataContext.Page = page;
        await LoadOrders();
    }

    private async Task LoadOrders() {

        try {

            await DataContext.LoadOrders(CustomerId, VendorId, SearchTerm);
            DataContext.HasError = false;

        } catch (IncompatibleDatabaseVersion ex) {

            DataContext.ErrorMessage = ex.Message;

            await ModalService.OpenErrorDialog(new() {
                    Title = "Could not load orders",
                    Details = ex.Message
                }, ModalSize.Automatic);

        } catch (Exception ex) {

            DataContext.ErrorMessage = ex.Message;

            await ModalService.OpenErrorDialog(new() {
                    Title = "Could not load orders",
                    Details = $"An exception was thrown while trying to load orders <br><br><br> {ex.Message} <br><br> {ex.StackTrace}"
                }, ModalSize.ExtraLarge);

        }

    }

    private async Task SelectOrder(Guid orderId) {

        try {
            await DataContext.OpenOrder(orderId);
        } catch (Exception ex) {

            await ModalService.OpenErrorDialog(new() {
                    Title = "Error Opening Order",
                    Details = $"An exception was thrown while trying to open the order <br><br><br> {ex.Message} <br><br> {ex.StackTrace}"
            }, ModalSize.ExtraLarge);

        }

    }

}
