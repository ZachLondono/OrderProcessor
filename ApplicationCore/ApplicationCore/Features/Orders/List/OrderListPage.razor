@page "/orders/list"
@    using ApplicationCore.Features.Companies
@    using ApplicationCore.Features.List
@    using ApplicationCore.Features.Orders.Shared.Domain
@    using ApplicationCore.Infrastructure
@inject IBus Bus
@inject OrderState OrderState
@inject CompanyState CompanyState
@inject NavigationManager NavigationManager

<h1 class="text-3xl mb-2 dark:text-white">Orders</h1>

@if (_isLoading) {
    <span>Loading...</span>
} else if (_orders is null) {
    <span>Could not load orders</span>
    <button type="button" class="text-white bg-blue-700 rounded-md text-xs px-2.5 py-1 mr-2 mb-2 hover:bg-blue-800" @onclick="LoadOrders">Refresh</button>
} else {

    <h2 class="text-lg  mb-2 dark:text-gray-300">All orders</h2>
    <table class="w-full table-auto">
        <thead class="border-b border-slate-300">
            <tr>
                <th class="p-5 dark:text-gray-500">Status</th>
                <th class="p-5 dark:text-gray-500">Number</th>
                <th class="p-5 dark:text-gray-500">Name</th>
                <th class="p-5 dark:text-gray-500">Customer</th>
                <th class="p-5 dark:text-gray-500">Vendor</th>
                <th class="p-5 dark:text-gray-500">Items</th>
                <th class="p-5 dark:text-gray-500">Order Date</th>
            </tr>
        </thead>
        <tbody>

            @foreach(var order in _orders) {
                <tr class="justify-center hover:bg-slate-200 dark:hover:bg-slate-500 cursor-pointer">
                    <td class="p-5 text-center border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenOrder(order.Id)">
                        <span class=@($"rounded-full px-3 py-1 mb-3 text-white text-xs font-semibold lowercase {order.Status.GetColor()}")>@order.Status</span>
                    </td>
                    <td class="p-5 whitespace-nowrap border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenOrder(order.Id)">@order.Number</td>
                    <td class="p-5 whitespace-nowrap border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenOrder(order.Id)">@order.Name</td>
                    <td class="p-5 whitespace-nowrap hover:underline border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenCompany(order.CustomerId)">@order.CustomerName</td>
                    <td class="p-5 whitespace-nowrap hover:underline border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenCompany(order.VendorId)" >@order.VendorName</td>
                    <td class="p-5 whitespace-nowrap text-center border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenOrder(order.Id)">@order.ItemCount</td>
                    <td class="p-5 whitespace-nowrap text-center border-b dark:border-slate-500 dark:text-white" @onclick="async () => await OpenOrder(order.Id)">@order.OrderDate.ToShortDateString()</td>
                </tr>
            }

        </tbody>
    </table>

}


@code {
    private bool _isLoading = true;
    private IEnumerable<OrderListItem>? _orders = null; 

    protected override async Task OnInitializedAsync() {
        await LoadOrders();
    }

    private async Task OpenOrder(Guid orderId) {
        await OrderState.LoadOrder(orderId);
        NavigationManager.NavigateTo("/orders/details", true);
    }

    private async Task LoadOrders() {
        _isLoading = true;
        var response = await Bus.Send(new GetOrderList.Query());
        response.Match(
            orders => {
                _orders = orders;
            },
            errors => {
                // TODO: disblay error
            }
        );
        _isLoading = false;
        StateHasChanged();
    }

    private async Task OpenCompany(Guid companyId) {
        await CompanyState.LoadCompany(companyId);
        NavigationManager.NavigateTo("/companies/details", true);
    }

}
