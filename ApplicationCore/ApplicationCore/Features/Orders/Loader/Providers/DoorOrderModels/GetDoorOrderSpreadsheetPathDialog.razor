@using ApplicationCore.Features.Shared.Components
@using ApplicationCore.Features.Shared.Services;
@using static ApplicationCore.Features.Shared.Components.Button;
@inject IFilePicker FilePicker 

<div>
    <Button OnClickAsync="ChooseFile" disabled="@_isPickingFile">Select File</Button>
    @if (string.IsNullOrEmpty(FilePath)) {
       <span>No file chosen...</span> 
    } else {
        <span>@FilePath</span>
    }
</div>

<div class="mt-12">
    <Button Style="ButtonStyle.Text" Color="ButtonColor.Success" OnClickAsync="ReturnValue" Class="mt-3 float-right mr-3" disabled="@string.IsNullOrEmpty(FilePath)">Enter</Button>
    <Button Style="ButtonStyle.Text" Color="ButtonColor.Secondary" OnClickAsync="Cancel" Class="mt-3 float-right">Cancel</Button>
</div>

@code {

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private bool _isPickingFile = false;
    public string FilePath { get; set; } = string.Empty;

    public async Task ReturnValue() {
        await BlazoredModal.CloseAsync(ModalResult.Ok(FilePath));
    }

    public async Task Cancel() {
        await BlazoredModal.CancelAsync();
    }

    public async Task ChooseFile() {
        _isPickingFile = true;
        StateHasChanged();
        await FilePicker.PickFileAsync("Picke door order file", "ReleasePDFDecorator", new("Door order file",".xlsm"), 
        (filepath) => {
            FilePath = filepath;
        });
        _isPickingFile = false;
        StateHasChanged();
    }

}
