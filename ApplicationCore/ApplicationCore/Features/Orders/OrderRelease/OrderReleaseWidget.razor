@using ApplicationCore.Features.Orders.Details.Queries;
@using ApplicationCore.Features.Orders.OrderRelease;
@using Domain.Orders.Entities;
@using Domain.Orders.Persistance;
@using Domain.Infrastructure.Bus;
@using Domain.Components
@using static Domain.Components.Button;
@inject IBus Bus

<Button Type="button" OnClickAsync="ReleaseOrder" Disabled="_isReleasing" Class="flex justify-center items-center h-10 w-36" Color="ButtonColor.Secondary">
    @if (_isReleasing) {
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
    }
    Release
</Button>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Parameter]
    public IEnumerable<Guid> OrderIds { get; set; } = Enumerable.Empty<Guid>();

    private bool _isReleasing = false;

    private async Task ReleaseOrder() {

        if (_isReleasing == true) {
            return;
        }

        _isReleasing = true;

        if (!OrderIds.Any()) {
            _isReleasing = false;
            return;
        }

        var dialog = Modal.Show<OrderReleaseModal>("Release Setup",
            new ModalParameters() {
                { "OrderIds", OrderIds }
            }, new ModalOptions() {
                HideHeader = true,
                HideCloseButton = true,
                DisableBackgroundCancel = true,
                Size = ModalSize.Large
            });

        _ = await dialog.Result;

        _isReleasing = false;

    } 

}
