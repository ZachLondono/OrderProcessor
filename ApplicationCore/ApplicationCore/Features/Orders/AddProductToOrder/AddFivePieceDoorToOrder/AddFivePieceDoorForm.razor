@using Domain.Components
@using Domain.Infrastructure.Bus
@using Domain.Orders.Entities.Products.Doors
@using Domain.ValueObjects
@using MediatR
@using static Domain.Components.Button

<NewProductForm Model="Model"
                TProduct="FivePieceDoorProduct"
                TProductModel="NewFivePieceDoorProduct"
                OnFormSubmit="AddFivePieceDoorToOrder">

    <div>
        <label>
            Qty
            <InputNumber @bind-Value="Model.Qty" />
        </label>
    </div>

    <div>
        <label>
            Unit Price
            <InputNumber @bind-Value="Model.UnitPrice" />
        </label>
    </div>

    <div>
        <label>
            Product Number
            <InputNumber @bind-Value="Model.ProductNumber" />
        </label>
    </div>

    <div>
        <label>
            Room
            <InputText @bind-Value="Model.Room" />
        </label>
    </div>

    <div>
        <label>
            Width
            <InputNumber @bind-Value="Model.Width" />
        </label>
    </div>

    <div>
        <label>
            Height
            <InputNumber @bind-Value="Model.Height" />
        </label>
    </div>

    <div>
        <label>
            Stiles
            <InputNumber @bind-Value="Model.Stiles" />
        </label>
    </div>

    <div>
        <label>
            Rails
            <InputNumber @bind-Value="Model.Rails" />
        </label>
    </div>

    <div>
        <label>
            Material
            <InputText @bind-Value="Model.Material" />
        </label>
    </div>

</NewProductForm>

@code {

    [Inject]
    public IBus Bus { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Guid OrderId { get; set; }

    public NewFivePieceDoorProduct Model { get; set; } = new();

    public Task<Response<FivePieceDoorProduct>> AddFivePieceDoorToOrder()
        => Bus.Send(new InsertFivePieceDoorProductInOrder.Command(OrderId, Model));

}
