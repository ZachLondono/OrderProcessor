@using Domain.Components
@using static Domain.Components.Button;

<div>
    <div>
        <label>Order ID*</label>
    </div>
    <input type="number" class="input-text w-full" min="0" @bind-value="OrderId" />
</div>
<div class="mt-5">
    <div>
        <label>Order Number</label>
        <small class="text-[8px]">optional</small>
    </div>
    <input type="text" class="input-text w-full" min="0" @bind-value="OrderNumber" />
</div>
<div class="mt-5">
    <div>
        <label>Working Directory Root</label>
        <small class="text-[8px]">optional</small>
    </div>
    <input type="text" class="input-text w-full" min="0" @bind-value="WorkingDirectoryRoot" />
</div>

<div class="mt-12">
    <Button Style="ButtonStyle.Text" Color="ButtonColor.Success" OnClickAsync="ReturnValue" Class="mt-3 float-right mr-3" disabled="@string.IsNullOrEmpty(OrderId)">Enter</Button>
    <Button Style="ButtonStyle.Text" Color="ButtonColor.Secondary" OnClickAsync="Cancel" Class="mt-3 float-right">Cancel</Button>
</div>

@code {

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModal { get; set; } = default!;
    public string OrderNumber { get; set; } = string.Empty;
    public string WorkingDirectoryRoot { get; set; } = string.Empty;

    public string OrderId { get; set; } = string.Empty;

    public async Task ReturnValue() {
        await BlazoredModal.CloseAsync(ModalResult.Ok($"{OrderId}*{OrderNumber}*{WorkingDirectoryRoot}"));
    }

    public async Task Cancel() {
        await BlazoredModal.CancelAsync();
    }

}
